%% /usr/local/src/hoc/hoc-7.0.0.beta/PROJECTS, Thu Dec  6 09:30:05 2001
%% Edit by Nelson H. F. Beebe <beebe@math.utah.edu>

This file logs development projects for hoc, in no particular order of
importance: instead, they are in ascending chronological order, with
time stamps.

There is no particular committment to doing any of these, but it
seemed worthwhile to record them, as a guide to future work.

------------------------------------------------------------------------
Thu Dec  6 19:21:46 2001

Consider making a version that calls the GNU multiple precision
library, gmp, instead of using native floating point.  This would not
give IEEE 754 support, but could still be quite valuable as a
calculator language with arbitrary precision.  Unfortunately, gmp does
not yet have the required library of elementary functions.

OR

Wed Dec 19 05:20:10 2001

Consider building hoc on top of the multiple-precision Standard
Decimal Arithmetic library at

	http://www2.hursley.ibm.com/decimal/decNumber.html

IF it ever gets a complement of the elementary function library.
------------------------------------------------------------------------
Thu Dec  6 19:18:07 2001

Consider making a pure Java translation of hoc, using some Java
equivalent of yacc/byacc/bison.  This would be an interesting project
to do a clean redesign, preserving the hoc language syntax exactly,
but opening the way for implementation of new ideas and extensions.

------------------------------------------------------------------------
Thu Dec  6 19:04:21 2001

Complete the internationalization project: there are problems with the
GNU readline() function not returning characters in 128..255 unless
LANG is set.

The language locale should be saved in a variable __LOCALE__ for use
by user code written in hoc.

Also, when I disable use of readline, then I still get failure like
this:

yylex() -> VAR [__epsilon]
Read from uninitialized (rui):
Attempting to read 8 bytes at address 0xffbedea8
    which is 32896 bytes above the current stack pointer
Variable is 'd'
Current function is yylex
  492                   yylval.sym = install("", NUMBER, d);
(/opt/SUNWspro/bin/../WS6U1/bin/sparcv9/dbx) where
=>[1] yylex(), line 492 in "hoc.y"
  [2] yyparse(), line 432 in "bison.simple"
  [3] run(), line 731 in "hoc.y"
  [4] main(argc = 1, argv = 0xffbee54c), line 902 in "hoc.y"
(/opt/SUNWspro/bin/../WS6U1/bin/sparcv9/dbx) c
stopped in code at line 709 in file "code.c"
  709                   execerror("program too big", (const char*)NULL);
(/opt/SUNWspro/bin/../WS6U1/bin/sparcv9/dbx) p progp
progp = 0x5eff0
(/opt/SUNWspro/bin/../WS6U1/bin/sparcv9/dbx) p &prog[0]
&prog[0] = 0x92848
(/opt/SUNWspro/bin/../WS6U1/bin/sparcv9/dbx) whatis prog
Inst prog[2000])();
(/opt/SUNWspro/bin/../WS6U1/bin/sparcv9/dbx) p &prog[2000]
dbx: warning: subscript out of range
&prog[2000] = 0x0

The code at that point is

	if (progp >= &prog[NPROG])
		execerror("program too big", (const char*)NULL);

The identical problem exists when hoc.c is built with byacc, yacc, and
"bison -y", so it does not depend on either the yacc implementation,
or the readline code.

...
yylex() -> VAR [__epsilon]
./hoc: program too big in /usr/local/share/lib/hoc/hoc-7.0.0.beta/hoc.rc near line 115
yylex() -> VAR [proc]
...

------------------------------------------------------------------------
Thu Dec  6 09:30:31 2001

Some C implementations may provide sufficient support for the long
double data type, including all of the library functions needed by
hoc, that it may be feasible to provide a compile-time choice of
double or long double, determined automatically by configure, but
overridable with the configure option --without-long-double.

Of the 15+ UNIX platforms currently available to the developer, only
IBM AIX 4.x, Compaq/DEC OSF/1 5.x, and Sun Solaris 2.8 Workshop 6U2
appear to have the necessary library support, with

AIX 4.2 and 4.3:
	long double acosl	(long double);
	long double asinl	(long double);
	long double atan2l	(long double , long double);
	long double atanl	(long double);
	long double ceill	(long double);
	long double coshl	(long double);
	long double cosl	(long double);
	long double erfcl	(long double);
	long double erfl	(long double);
	long double expl	(long double);
	long double fabsl	(long double);
	long double floorl	(long double);
	long double fmodl	(long double , long double);
	long double frexpl	(long double ,
	long double ldexpl	(long double ,
	long double lgammal	(long double);
	long double log10l	(long double);
	long double logl	(long double);
	long double modfl	(long double , long double *);
	long double powl	(long double , long double);
	long double sinhl	(long double);
	long double sinl	(long double);
	long double sqrtl	(long double);
	long double strtold	(const char *, char **);
	long double tanhl	(long double);
	long double tanl	(long double);

OSF/1 5.0:
	int finitel		( long double ) ;
	int fp_classl		( long double ) ;
	int isnanl		( long double ) ;
	long double acosdl	( long double ) ;
	long double acoshl	( long double ) ;
	long double acosl	( long double ) ;
	long double asindl	( long double ) ;
	long double asinhl	( long double ) ;
	long double asinl	( long double ) ;
	long double atan2l	( long double , long double ) ;
	long double atand2l	( long double , long double ) ;
	long double atandl	( long double ) ;
	long double atanhl	( long double ) ;
	long double atanl	( long double ) ;
	long double cbrtl	( long double ) ;
	long double ceill	( long double ) ;
	long double copysignl	( long double , long double ) ;
	long double cosdl	( long double ) ;
	long double coshl	( long double ) ;
	long double cosl	( long double ) ;
	long double cotdl	( long double ) ;
	long double cotl	( long double ) ;
	long double dreml	( long double , long double ) ;
	long double erfcl	( long double ) ;
	long double erfl	( long double ) ;
	long double expl	( long double ) ;
	long double expm1l	( long double ) ;
	long double fabsl	( long double ) ;
	long double floorl	( long double ) ;
	long double fmodl	( long double , long double ) ;
	long double frexpl	( long double , int * ) ;
	long double gammal	( long double ) ;
	long double hypotl	( long double , long double ) ;
	long double j0l		( long double ) ;
	long double j1l		( long double ) ;
	long double jnl		( int , long double ) ;
	long double ldexpl	( long double , int ) ;
	long double lgammal	( long double ) ;
	long double log10l	( long double ) ;
	long double log1pl	( long double ) ;
	long double log2l	( long double ) ;
	long double logbl	( long double ) ;
	long double logl	( long double ) ;
	long double modfl	( long double , long double * ) ;
	long double nextafterl	( long double , long double ) ;
	long double nintl	( long double ) ;
	long double powil	( long double , int ) ;
	long double powl	( long double , long double ) ;
	long double rintl	( long double ) ;
	long double scalbl	( long double , long double ) ;
	long double sindl	( long double ) ;
	long double sinhl	( long double ) ;
	long double sinl	( long double ) ;
	long double sqrtl	( long double ) ;
	long double strtold	( const char * , char * * ) ;
	long double tandl	( long double ) ;
	long double tanhl	( long double ) ;
	long double tanl	( long double ) ;
	long double truncl	( long double ) ;
	long double unorderedl	( long double , long double ) ;
	long double y0l		( long double ) ;
	long double y1l		( long double ) ;
	long double ynl		( int , long double ) ;

Sun Solaris 2.8 (in <sunmath.h>:
	int finitel			(long double);
	int ilogbl			(long double);
	int iq_finite_			(long double *);
	int iq_ilogb_			(long double *);
	int iq_isinf_			(long double *);
	int iq_isnan_			(long double *);
	int iq_isnormal_		(long double *);
	int iq_issubnormal_		(long double *);
	int iq_iszero_			(long double *);
	int iq_signbit_			(long double *);
	int irintl			(long double);
	int isinfl			(long double);
	int isnanl			(long double);
	int isnormall			(long double);
	int issubnormall		(long double);
	int iszerol			(long double);
	int nintl			(long double);
	int signbitl			(long double);
	long double acosdl		(long double);
	long double acoshl		(long double);
	long double acosl		(long double);
	long double acospil		(long double);
	long double acospl		(long double);
	long double aintl		(long double);
	long double anintl		(long double);
	long double annuityl		(long double, long double);
	long double asindl		(long double);
	long double asinhl		(long double);
	long double asinl		(long double);
	long double asinpil		(long double);
	long double asinpl		(long double);
	long double atan2dl		(long double, long double);
	long double atan2l		(long double, long double);
	long double atan2pil		(long double, long double);
	long double atandl		(long double);
	long double atanhl		(long double);
	long double atanl		(long double);
	long double atanpil		(long double);
	long double atanpl		(long double);
	long double cbrtl		(long double);
	long double ceill		(long double);
	long double compoundl		(long double, long double);
	long double copysignl		(long double, long double);
	long double cosdl		(long double);
	long double coshl		(long double);
	long double cosl		(long double);
	long double cospil		(long double);
	long double cospl		(long double);
	long double erfcl		(long double);
	long double erfl		(long double);
	long double exp10l		(long double);
	long double exp2l		(long double);
	long double expl		(long double);
	long double expm1l		(long double);
	long double fabsl		(long double);
	long double floorl		(long double);
	long double fmodl		(long double, long double);
	long double gammal		(long double);
	long double gammal_r		(long double, int *);
	long double hypotl		(long double, long double);
	long double infinityl		(void);
	long double j0l			(long double);
	long double j1l			(long double);
	long double jnl			(int, long double);
	long double lgammal		(long double);
	long double lgammal_r		(long double, int *);
	long double log10l		(long double);
	long double log1pl		(long double);
	long double log2l		(long double);
	long double logbl		(long double);
	long double logl		(long double);
	long double max_normall		(void);
	long double max_subnormall	(void);
	long double min_normall		(void);
	long double min_subnormall	(void);
	long double nextafterl		(long double, long double);
	long double powl		(long double, long double);
	long double q_copysign_		(long double *, long double *);
	long double q_fabs_		(long double *);
	long double q_fmod_		(long double *, long double *);
	long double q_infinity_		(void);
	long double q_max_normal_	(void);
	long double q_max_subnormal_	(void);
	long double q_min_normal_	(void);
	long double q_min_subnormal_	(void);
	long double q_nextafter_	(long double *, long double *);
	long double q_quiet_nan_	(long *);
	long double q_remainder_	(long double *, long double *);
	long double q_scalbn_		(long double *, int *);
	long double q_signaling_nan_	(long *);
	long double quiet_nanl		(long);
	long double remainderl		(long double, long double);
	long double rintl		(long double);
	long double scalbl		(long double, long double);
	long double scalbnl		(long double, int);
	long double signaling_nanl	(long);
	long double significandl	(long double);
	long double sindl		(long double);
	long double sinhl		(long double);
	long double sinl		(long double);
	long double sinpil		(long double);
	long double sinpl		(long double);
	long double sqrtl		(long double);
	long double tandl		(long double);
	long double tanhl		(long double);
	long double tanl		(long double);
	long double tanpil		(long double);
	long double tanpl		(long double);
	long double y0l			(long double);
	long double y1l			(long double);
	long double ynl			(int, long double);
	void sincosdl			(long double, long double *, long double *);
	void sincosl			(long double, long double *, long double *);
	void sincospil			(long double, long double *, long double *);
	void sincospl			(long double, long double *, long double *);

------------------------------------------------------------------------
Sat Dec  8 18:15:34 2001

Implement local and global variables in functions and procedures,
preferably without introducing new statements into the language.
[e.g., the convention might be that variables that begin with a letter
are automatically local, while those that being with underscore are
global.  This is the reverse of the current practice, but is easy to
explain, and makes globals easy to recognize.]

------------------------------------------------------------------------
Sat Dec  8 18:17:10 2001

Implement associative arrays (a la awk) into hoc, with a corresponding
iterator, e.g. foreach (key in array) { ... }, and sort function(s).

------------------------------------------------------------------------
Sat Dec  8 18:22:11 2001

Considering making newline less important in the language, so that
backslash-newline is less frequent, a la awk, where semicolons are
only rarely necessary.

------------------------------------------------------------------------
Tue Dec 11 16:52:47 2001

Add support for dynamic loading of functions written in other
languages from load libraries, perhaps supplied by the user, or the
computer vendor, or a third party commercial vendor (such as Precision
Numerics (IMSL), and NAG), or a freeware library like the GNU
Scientific Library (GSL) or FUNPACK.  Matlab, Octave, and Maple can
all do this.

------------------------------------------------------------------------
Mon Dec 17 08:24:52 2001

Provide prebuilt versions of hoc for Microsoft Windows, Apple
Macintosh, and handheld Personal Digital Assistant computers, in the
hoc master Internet source distribution archive.  For PDAs, it is
likely that some sort of simple windowing wrapper will be needed.
Those systems could provide millions of hoc installations, so this
project is important.  The maintainer is not going to do the PDA port,
however; some volunteer is needed.  Perhaps the PDA port will have to
wait until a Java translation is complete.
------------------------------------------------------------------------
