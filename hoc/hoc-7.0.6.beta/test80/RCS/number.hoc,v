head	1.1;
access;
symbols;
locks
	beebe:1.1; strict;
comment	@# @;


1.1
date	2002.08.06.13.42.07;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.1
log
@Initial revision
@
text
@### -*-hoc-*-
### ====================================================================
### Test the number() function with hexadecimal and decimal
### floating-point string arguments in hoc.  This also provides an
### indirect test of hexfp(), hexint(), and string()
### [30-Dec-2001]
### ====================================================================

eps = macheps(1)
scale_plus = 1 + eps
scale_minus = 1 - eps/2
scale_alt = 2/3			# alternating 0 and 1 bits: +0x1.5555555555555p-1

proc test_hexfp() \
{
	__x = $1
	__y = number(hexfp(__x))
	__TEST__ = "(y == x)"
	__assert    (__y == __x)
	## if (__x != __y) println "DEBUG:", __x, hexfp(__x), __y, hexfp(__y)

}

proc test_hexint() \
{
	__x = $1
	__y = number(hexint(__x))
	__TEST__ = "(y == x)"
	__assert    (__y == __x)
	## if (__x != __y) println "DEBUG:", __x, hexfp(__x), __y, hexfp(__y)
}

proc test_string() \
{
	__x = $1
	__y = number(string(__x))
	__TEST__ = "(y == x)"
	__assert    (__y == __x)
	## if (__x != __y) println "DEBUG:", __x, hexfp(__x), __y, hexfp(__y)
}

### println "Test group 1"

for (x = MINSUBNORMAL; x <= MAXNORMAL; x *= 2) \
{
	k = nint(log2(x))
	y = number("0x1p" k)
	## if (x != y) println "DEBUG:", x, hexfp(x), y, hexfp(y)
	__TEST__ = "(y == 2^k)"
	__assert    (y == 2^k)
}

### println "Test group 2"

for (x = MINSUBNORMAL; x <= MAXNORMAL; x *= 2) \
{
	test_hexfp(x)
	test_hexfp(x*scale_plus)
	test_hexfp(x*scale_minus)
	test_hexfp(x*scale_alt)
}

### println "Test group 3"

for (x = MINSUBNORMAL; x <= MAXNORMAL; x *= 2) \
{
	test_hexint(x)
	test_hexint(x*scale_plus)
	test_hexint(x*scale_minus)
	test_hexint(x*scale_alt)
}

### println "Test group 4"

for (x = MINSUBNORMAL; x <= MAXNORMAL; x *= 2) \
{
	test_string(x)
	test_string(x*scale_plus)
	test_string(x*scale_minus)
	test_string(x*scale_alt)
}

### println "Test group 5"

for (k = 0; k <= 53; ++k) \
{
	x = 2^k
	test_hexint(x)
	test_hexint(x*scale_plus)
	test_hexint(x*scale_minus)
	test_hexint(x*scale_alt)
}

### println "Test group 6"

__TEST__ = "isnan(number(\"+nan\"))"
__assert   (isnan(number("+nan")))

__TEST__ = "isnan(number(\"+qnan\"))"
__assert   (isnan(number("+qnan")))

__TEST__ = "isnan(number(\"+snan\"))"
__assert   (isnan(number("+snan")))

__TEST__ = "isnan(number(\"-nan\"))"
__assert   (isnan(number("-nan")))

__TEST__ = "isnan(number(\"-qnan\"))"
__assert   (isnan(number("-qnan")))

__TEST__ = "isnan(number(\"-snan\"))"
__assert   (isnan(number("-snan")))

__TEST__ = "isnan(number(\"nan\"))"
__assert   (isnan(number("nan")))

__TEST__ = "isnan(number(\"qnan\"))"
__assert   (isnan(number("qnan")))

__TEST__ = "isnan(number(\"snan\"))"
__assert   (isnan(number("snan")))


__TEST__ = "isnan(number(\"+NAN\"))"
__assert   (isnan(number("+NAN")))

__TEST__ = "isnan(number(\"+QNAN\"))"
__assert   (isnan(number("+QNAN")))

__TEST__ = "isnan(number(\"+SNAN\"))"
__assert   (isnan(number("+SNAN")))

__TEST__ = "isnan(number(\"-NAN\"))"
__assert   (isnan(number("-NAN")))

__TEST__ = "isnan(number(\"-QNAN\"))"
__assert   (isnan(number("-QNAN")))

__TEST__ = "isnan(number(\"-SNAN\"))"
__assert   (isnan(number("-SNAN")))

__TEST__ = "isnan(number(\"NAN\"))"
__assert   (isnan(number("NAN")))

__TEST__ = "isnan(number(\"QNAN\"))"
__assert   (isnan(number("QNAN")))

__TEST__ = "isnan(number(\"SNAN\"))"
__assert   (isnan(number("SNAN")))


__TEST__ = "isnan(number(\"+NaN\"))"
__assert   (isnan(number("+NaN")))

__TEST__ = "isnan(number(\"+QNaN\"))"
__assert   (isnan(number("+QNaN")))

__TEST__ = "isnan(number(\"+SNaN\"))"
__assert   (isnan(number("+SNaN")))

__TEST__ = "isnan(number(\"-NaN\"))"
__assert   (isnan(number("-NaN")))

__TEST__ = "isnan(number(\"-QNaN\"))"
__assert   (isnan(number("-QNaN")))

__TEST__ = "isnan(number(\"-SNaN\"))"
__assert   (isnan(number("-SNaN")))

__TEST__ = "isnan(number(\"NaN\"))"
__assert   (isnan(number("NaN")))

__TEST__ = "isnan(number(\"QNaN\"))"
__assert   (isnan(number("QNaN")))

__TEST__ = "isnan(number(\"SNaN\"))"
__assert   (isnan(number("SNaN")))


__TEST__ = "number(\"+inf\") == +Inf"
__assert   (number("+inf") == +Inf)

__TEST__ = "number(\"+infinity\") == +Inf"
__assert   (number("+infinity") == +Inf)

__TEST__ = "number(\"-inf\") == -Inf"
__assert   (number("-inf") == -Inf)

__TEST__ = "number(\"-infinity\") == -Inf"
__assert   (number("-infinity") == -Inf)

__TEST__ = "number(\"inf\") == Inf"
__assert   (number("inf") == Inf)

__TEST__ = "number(\"infinity\") == Inf"
__assert   (number("infinity") == Inf)


__TEST__ = "number(\"+INF\") == +Inf"
__assert   (number("+INF") == +Inf)

__TEST__ = "number(\"+INFINITY\") == +Inf"
__assert   (number("+INFINITY") == +Inf)

__TEST__ = "number(\"-INF\") == -Inf"
__assert   (number("-INF") == -Inf)

__TEST__ = "number(\"-INFINITY\") == -Inf"
__assert   (number("-INFINITY") == -Inf)

__TEST__ = "number(\"INF\") == Inf"
__assert   (number("INF") == Inf)

__TEST__ = "number(\"INFINITY\") == Inf"
__assert   (number("INFINITY") == Inf)


__TEST__ = "number(\"+Inf\") == +Inf"
__assert   (number("+Inf") == +Inf)

__TEST__ = "number(\"+Infinity\") == +Inf"
__assert   (number("+Infinity") == +Inf)

__TEST__ = "number(\"-Inf\") == -Inf"
__assert   (number("-Inf") == -Inf)

__TEST__ = "number(\"-Infinity\") == -Inf"
__assert   (number("-Infinity") == -Inf)

__TEST__ = "number(\"Inf\") == Inf"
__assert   (number("Inf") == Inf)

__TEST__ = "number(\"Infinity\") == Inf"
__assert   (number("Infinity") == Inf)



if (!issnan(QNaN)) \
{					# quiet and signaling NaNs are distinct

	## println "Test group 7"

	__TEST__ = "isqnan(number(\"+NaN\"))"
	__assert   (isqnan(number("+NaN")))

	__TEST__ = "isqnan(number(\"+QNaN\"))"
	__assert   (isqnan(number("+QNaN")))

	__TEST__ = "isqnan(number(\"-NaN\"))"
	__assert   (isqnan(number("-NaN")))

	__TEST__ = "isqnan(number(\"-QNaN\"))"
	__assert   (isqnan(number("-QNaN")))

	__TEST__ = "isqnan(number(\"NaN\"))"
	__assert   (isqnan(number("NaN")))

	__TEST__ = "isqnan(number(\"QNaN\"))"
	__assert   (isqnan(number("QNaN")))


	__TEST__ = "issnan(number(\"+SNaN\"))"
	__assert   (issnan(number("+SNaN")))

	__TEST__ = "issnan(number(\"-SNaN\"))"
	__assert   (issnan(number("-SNaN")))

	__TEST__ = "issnan(number(\"SNaN\"))"
	__assert   (issnan(number("SNaN")))


	__TEST__ = "!isqnan(number(\"+SNaN\"))"
	__assert   (!isqnan(number("+SNaN")))

	__TEST__ = "!isqnan(number(\"-SNaN\"))"
	__assert   (!isqnan(number("-SNaN")))

	__TEST__ = "!isqnan(number(\"SNaN\"))"
	__assert   (!isqnan(number("SNaN")))


	__TEST__ = "!issnan(number(\"+NaN\"))"
	__assert   (!issnan(number("+NaN")))

	__TEST__ = "!issnan(number(\"+QNaN\"))"
	__assert   (!issnan(number("+QNaN")))

	__TEST__ = "!issnan(number(\"-NaN\"))"
	__assert   (!issnan(number("-NaN")))

	__TEST__ = "!issnan(number(\"-QNaN\"))"
	__assert   (!issnan(number("-QNaN")))

	__TEST__ = "!issnan(number(\"NaN\"))"
	__assert   (!issnan(number("NaN")))

	__TEST__ = "!issnan(number(\"QNaN\"))"
	__assert   (!issnan(number("QNaN")))

}
@
