head	1.1;
access;
symbols;
locks
	beebe:1.1; strict;
comment	@# @;


1.1
date	2002.08.06.13.42.47;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.1
log
@Initial revision
@
text
@### -*-hoc-*-
### ====================================================================
### Test the class() function.
### [25-Jan-2002]
### ====================================================================

__TEST__ = "class(-Inf) == CLASS_NEGINF"
__assert   (class(-Inf) == CLASS_NEGINF)
__TEST__ = "class(-1) == CLASS_NEGNORMAL"
__assert   (class(-1) == CLASS_NEGNORMAL)
__TEST__ = "class(-MINSUBNORMAL) == CLASS_NEGSUBNORMAL"
__assert   (class(-MINSUBNORMAL) == CLASS_NEGSUBNORMAL)
__TEST__ = "class(-MAXSUBNORMAL) == CLASS_NEGSUBNORMAL"
__assert   (class(-MAXSUBNORMAL) == CLASS_NEGSUBNORMAL)
__TEST__ = "class(-0) == CLASS_NEGZERO"
__assert   (class(-0) == CLASS_NEGZERO)
__TEST__ = "class(+Inf) == CLASS_POSINF"
__assert   (class(+Inf) == CLASS_POSINF)
__TEST__ = "class(+1) == CLASS_POSNORMAL"
__assert   (class(+1) == CLASS_POSNORMAL)
__TEST__ = "class(MINSUBNORMAL) == CLASS_POSSUBNORMAL"
__assert   (class(MINSUBNORMAL) == CLASS_POSSUBNORMAL)
__TEST__ = "class(MAXSUBNORMAL) == CLASS_POSSUBNORMAL"
__assert   (class(MAXSUBNORMAL) == CLASS_POSSUBNORMAL)
__TEST__ = "class(+0) == CLASS_POSZERO"
__assert   (class(+0) == CLASS_POSZERO)
__TEST__ = "class(QNaN) == CLASS_QNAN"
__assert   (class(QNaN) == CLASS_QNAN)
__TEST__ = "class(SNaN) == CLASS_SNAN"
__assert   (class(SNaN) == CLASS_SNAN)
__TEST__ = "class(-QNaN) == CLASS_QNAN"
__assert   (class(-QNaN) == CLASS_QNAN)
__TEST__ = "class(-SNaN) == CLASS_SNAN"
__assert   (class(-SNaN) == CLASS_SNAN)

mult = 32				# to shorten test time

for (x = MINSUBNORMAL; x < MINNORMAL; x *= mult) \
{
	__TEST__ = "class(x) == CLASS_POSSUBNORMAL"
	__assert   (class(x) == CLASS_POSSUBNORMAL)
	__TEST__ = "class(-x) == CLASS_NEGSUBNORMAL"
	__assert   (class(-x) == CLASS_NEGSUBNORMAL)
}

for (x = MINNORMAL; x <= MAXNORMAL; x *= mult) \
{
	__TEST__ = "class(x) == CLASS_POSNORMAL"
	__assert   (class(x) == CLASS_POSNORMAL)
	__TEST__ = "class(-x) == CLASS_NEGNORMAL"
	__assert   (class(-x) == CLASS_NEGNORMAL)
}
@
