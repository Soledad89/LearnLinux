head	1.1;
access;
symbols;
locks
	beebe:1.1; strict;
comment	@# @;


1.1
date	2001.12.13.16.37.43;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.1
log
@Initial revision
@
text
@### -*-hoc-*-
### ====================================================================
### Test the correct handling of IEEE 754 Infinity.
### [12-Dec-2001]
### ====================================================================

if (__IEEE_754__) \
{
	## Tests with numeric expressions
	__TEST__ = "isinf(+1/+0)"
	__assert   (isinf(+1/+0))

	__TEST__ = "isinf(+1/-0)"
	__assert   (isinf(+1/-0))

	__TEST__ = "isinf(-1/+0)"
	__assert   (isinf(-1/+0))

	__TEST__ = "isinf(-1/-0)"
	__assert   (isinf(-1/-0))

	__TEST__ = "isinf(1.0e+300^2)"
	__assert   (isinf(1.0e+300^2))

	__TEST__ = "isinf(-(1.0e+300^2))"
	__assert   (isinf(-(1.0e+300^2)))

	__TEST__ = "isinf(+1/+0)"
	__assert   (isinf(+1/+0))

	## Tests that should not produce infinity

	__TEST__ = "!isinf(0)"
	__assert   (!isinf(0))

	__TEST__ = "!isinf(1)"
	__assert   (!isinf(1))

	__TEST__ = "!isinf(1.0e-300^2)"
	__assert   (!isinf(1.0e-300^2))

	__TEST__ = "!isinf(-(1.0e-300^2))"
	__assert   (!isinf(-(1.0e-300^2)))

	## Tests with named constants

	__TEST__ = "!isinf(NaN)"
	__assert   (!isinf(NaN))

	__TEST__ = "!isinf(+NaN)"
	__assert   (!isinf(+NaN))

	__TEST__ = "!isinf(-NaN)"
	__assert   (!isinf(-NaN))

	__TEST__ = "!isinf(QNaN)"
	__assert   (!isinf(QNaN))

	__TEST__ = "!isinf(+QNaN)"
	__assert   (!isinf(+QNaN))

	__TEST__ = "!isinf(-QNaN)"
	__assert   (!isinf(-QNaN))

	__TEST__ = "!isinf(SNaN)"
	__assert   (!isinf(SNaN))

	__TEST__ = "!isinf(+SNaN)"
	__assert   (!isinf(+SNaN))

	__TEST__ = "!isinf(-SNaN)"
	__assert   (!isinf(-SNaN))

	__TEST__ = "!isinf(NAN)"
	__assert   (!isinf(NAN))

	__TEST__ = "!isinf(+NAN)"
	__assert   (!isinf(+NAN))

	__TEST__ = "!isinf(-NAN)"
	__assert   (!isinf(-NAN))

	__TEST__ = "!isinf(QNAN)"
	__assert   (!isinf(QNAN))

	__TEST__ = "!isinf(+QNAN)"
	__assert   (!isinf(+QNAN))

	__TEST__ = "!isinf(-QNAN)"
	__assert   (!isinf(-QNAN))

	__TEST__ = "!isinf(SNAN)"
	__assert   (!isinf(SNAN))

	__TEST__ = "!isinf(+SNAN)"
	__assert   (!isinf(+SNAN))

	__TEST__ = "!isinf(-SNAN)"
	__assert   (!isinf(-SNAN))

	__TEST__ = "isinf(Inf)"
	__assert   (isinf(Inf))

	__TEST__ = "isinf(+Inf)"
	__assert   (isinf(+Inf))

	__TEST__ = "isinf(-Inf)"
	__assert   (isinf(-Inf))

	__TEST__ = "isinf(+Inf + Inf)"
	__assert   (isinf(+Inf + Inf))

	__TEST__ = "isinf(-Inf - Inf)"
	__assert   (isinf(-Inf - Inf))

	__TEST__ = "isinf(+Inf * +Inf)"
	__assert   (isinf(+Inf * +Inf))

	__TEST__ = "isinf(+Inf * -Inf)"
	__assert   (isinf(+Inf * -Inf))

	__TEST__ = "isinf(-Inf * +Inf)"
	__assert   (isinf(-Inf * +Inf))

	__TEST__ = "isinf(-Inf * -Inf)"
	__assert   (isinf(-Inf * -Inf))

	## Same tests, with synonyms

	__TEST__ = "isinf(INF)"
	__assert   (isinf(INF))

	__TEST__ = "isinf(+INF)"
	__assert   (isinf(+INF))

	__TEST__ = "isinf(-INF)"
	__assert   (isinf(-INF))

	__TEST__ = "isinf(+INF + INF)"
	__assert   (isinf(+INF + INF))

	__TEST__ = "isinf(-INF - INF)"
	__assert   (isinf(-INF - INF))

	__TEST__ = "isinf(+INF * +INF)"
	__assert   (isinf(+INF * +INF))

	__TEST__ = "isinf(+INF * -INF)"
	__assert   (isinf(+INF * -INF))

	__TEST__ = "isinf(-INF * +INF)"
	__assert   (isinf(-INF * +INF))

	__TEST__ = "isinf(-INF * -INF)"
	__assert   (isinf(-INF * -INF))

	__TEST__ = "isinf(Infinity)"
	__assert   (isinf(Infinity))

	__TEST__ = "isinf(+Infinity)"
	__assert   (isinf(+Infinity))

	__TEST__ = "isinf(-Infinity)"
	__assert   (isinf(-Infinity))

	__TEST__ = "isinf(+Infinity + Infinity)"
	__assert   (isinf(+Infinity + Infinity))

	__TEST__ = "isinf(-Infinity - Infinity)"
	__assert   (isinf(-Infinity - Infinity))

	__TEST__ = "isinf(+Infinity * +Infinity)"
	__assert   (isinf(+Infinity * +Infinity))

	__TEST__ = "isinf(+Infinity * -Infinity)"
	__assert   (isinf(+Infinity * -Infinity))

	__TEST__ = "isinf(-Infinity * +Infinity)"
	__assert   (isinf(-Infinity * +Infinity))

	__TEST__ = "isinf(-Infinity * -Infinity)"
	__assert   (isinf(-Infinity * -Infinity))
}
@
