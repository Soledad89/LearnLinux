head	1.2;
access;
symbols;
locks
	beebe:1.2; strict;
comment	@# @;


1.2
date	2002.08.06.13.36.26;	author beebe;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.11.15.21.56;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.2
log
@Update to used named, rather than numbered, function/procedure
arguments.
@
text
@### -*-hoc-*-
### ====================================================================
### Test ceil().
### [10-Dec-2001]
### ====================================================================

proc scaled_ceil_check(a) \
{
	global __SCALE__, __TEST__
	x = __SCALE__ * a

	## print "DEBUG 1:", a, __SCALE__, x, "\n"

	## d = ceil(x) - x

	__TEST__ = "abs(ceil(x) - x) < 1"
	__assert   (abs(ceil(x) - x) < 1)

	## print "DEBUG 2:", a, __SCALE__, x, "\n"

	__TEST__ = "ceil(x) >= x"
	__assert   (ceil(x) >= x)

	if (ceil(x) == int(x)) \
	{
	} \
	else \
	{
		if (x >= 0) \
		{
			__TEST__ = "ceil(x) == int(x + 1)"
			__assert   (ceil(x) == int(x) + 1)
		} \
		else \
		{
			__TEST__ = "ceil(x) == int(x)"
			__assert   (ceil(x) == int(x))
		}
	}
	## print "DEBUG 3:", a, __SCALE__, x, "\n"
}

__n = -log2(macheps(1))

for (__k = 1 ; __k <= __n; ++__k) \
{
	__SCALE__ = 2^__k
	scaled_ceil_check(2 + 2^-__k)
	scaled_ceil_check(2 - 2^-__k)
	scaled_ceil_check(1 + 2^-__k)
	scaled_ceil_check(1 - 2^-__k)
	scaled_ceil_check(0 + 2^-__k)
	scaled_ceil_check(0 - 2^-__k)
}

__TEST__ = "isnan(ceil(NaN))"
__assert   (isnan(ceil(NaN)))

__TEST__ = "isnan(ceil(-NaN))"
__assert   (isnan(ceil(-NaN)))

__TEST__ = "isinf(ceil(Inf))"
__assert   (isinf(ceil(Inf)))

__TEST__ = "isinf(ceil(-Inf))"
__assert   (isinf(ceil(-Inf)))
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
proc scaled_ceil_check() \
d9 2
a10 1
	__x = __SCALE__ * $1
d12 1
a12 1
	## print "DEBUG 1: ", $1, __SCALE__, __x, "\n"
d14 1
a14 1
	## d = ceil(__x) - __x
d16 2
a17 2
	__TEST__ = "abs(ceil(__x) - __x) < 1"
	__assert   (abs(ceil(__x) - __x) < 1)
d19 1
a19 1
	## print "DEBUG 2: ", $1, __SCALE__, __x, "\n"
d21 2
a22 2
	__TEST__ = "ceil(__x) >= __x"
	__assert   (ceil(__x) >= __x)
d24 1
a24 1
	if (ceil(__x) == int(__x)) \
d29 1
a29 1
		if (__x >= 0) \
d31 2
a32 2
			__TEST__ = "ceil(__x) == int(__x + 1)"
			__assert   (ceil(__x) == int(__x) + 1)
d36 2
a37 2
			__TEST__ = "ceil(__x) == int(__x)"
			__assert   (ceil(__x) == int(__x))
d40 1
a40 1
	## print "DEBUG 3: ", $1, __SCALE__, __x, "\n"
@
