### -*-hoc-*-
### ====================================================================
### Test the char() and ichar() functions.
### [24-Jul-2002]
### ====================================================================

for (k = -256; k <= 512; ++k) \
{
	__TEST__ = "ichar(char(" k" )) == ((" k " + 256) % 256)"
	__assert   (ichar(char(k)) == ((k + 256) % 256))
}

print "These tests are expected to fail with an EBCDIC host character set,\n"
print "but must succeed with ASCII, ISO 8859-n, or Unicode character sets.\n"

__TEST__ = "char(0) == \"\""
__assert   (char(0) == "")

__TEST__ = "char(9) == \"\t\""
__assert   (char(9) == "\t")

__TEST__ = "char(10) == \"\n\""
__assert   (char(10) == "\n")

__TEST__ = "char(48) == \"0\""
__assert   (char(48) == "0")

__TEST__ = "char(65) == \"A\""
__assert   (char(65) == "A")

__TEST__ = "char(97) == \"a\""
__assert   (char(97) == "a")

__TEST__ = "ichar(\"\") == 0"
__assert   (ichar("") == 0)

__TEST__ = "ichar(\"\t\") == 9"
__assert   (ichar("\t") == 9)

__TEST__ = "ichar(\"\n\") == 10"
__assert   (ichar("\n") == 10)

__TEST__ = "ichar(\"0\") == 48"
__assert   (ichar("0") == 48)

__TEST__ = "ichar(\"ABC\") == 65"
__assert   (ichar("ABC") == 65)

__TEST__ = "ichar(\"abc\") == 97"
__assert   (ichar("abc") == 97)
