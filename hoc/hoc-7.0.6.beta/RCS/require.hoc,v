head	1.2;
access;
symbols;
locks
	beebe:1.2; strict;
comment	@# @;


1.2
date	2002.08.08.01.24.38;	author beebe;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.28.13.13.54;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.2
log
@Add some needed global statements.
@
text
@### -*-hoc-*-
### ====================================================================
### Implement require() and provide() functions for avoiding unnecessary
### reloading of library files.
### [07-Jan-2002]
### ====================================================================

if (!defined(___provide_list)) \
	___provide_list = ""

proc provide(filename) \
{
	## Usage: provide("filename")
	global ___provide_list

	___provide_list = ___provide_list "<<" protect(filename) ">> "
}

proc require(filename) \
{
	## Usage: require("filename")
	global ___provide_list

	if (index(___provide_list, ("<<" protect(filename) ">>")) == 0) \
		load(filename)
}

proc help_provide() \
{
	print "\tprovide(\"filename\") records that \"filename\" has already been\n"
	print "\tloaded.  The companion require(\"filename\") function can then\n"
	print "\tavoid reloading it unnecessarily.\n\n"
}

proc help_require() \
{
	print "\trequire(\"filename\") checks whether provide(\"filename\") has\n"
	print "\talready been called, and if not, calls load(\"filename\").\n\n"
}
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
proc provide() \
d14 1
d16 1
a16 1
	___provide_list = ___provide_list "<<" protect($$1) ">> "
d19 1
a19 1
proc require() \
d22 1
d24 2
a25 2
	if (index(___provide_list, ("<<" protect($$1) ">>")) == 0) \
		load($$1)
d28 1
a28 1
proc help_provide()
d35 1
a35 1
proc help_require()
@
