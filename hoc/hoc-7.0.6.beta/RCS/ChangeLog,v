head	1.32;
access;
symbols;
locks
	beebe:1.32; strict;
comment	@# @;


1.32
date	2002.08.08.22.32.43;	author beebe;	state Exp;
branches;
next	1.31;

1.31
date	2002.08.08.22.26.10;	author beebe;	state Exp;
branches;
next	1.30;

1.30
date	2002.08.08.01.26.41;	author beebe;	state Exp;
branches;
next	1.29;

1.29
date	2002.08.05.11.21.59;	author beebe;	state Exp;
branches;
next	1.28;

1.28
date	2002.08.01.16.36.05;	author beebe;	state Exp;
branches;
next	1.27;

1.27
date	2002.08.01.12.20.09;	author beebe;	state Exp;
branches;
next	1.26;

1.26
date	2002.07.31.17.27.32;	author beebe;	state Exp;
branches;
next	1.25;

1.25
date	2002.07.30.20.40.06;	author beebe;	state Exp;
branches;
next	1.24;

1.24
date	2002.07.30.18.29.21;	author beebe;	state Exp;
branches;
next	1.23;

1.23
date	2002.07.30.18.28.09;	author beebe;	state Exp;
branches;
next	1.22;

1.22
date	2002.07.30.18.26.18;	author beebe;	state Exp;
branches;
next	1.21;

1.21
date	2002.07.28.18.34.24;	author beebe;	state Exp;
branches;
next	1.20;

1.20
date	2002.07.28.14.26.33;	author beebe;	state Exp;
branches;
next	1.19;

1.19
date	2002.07.28.01.41.16;	author beebe;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.27.17.43.26;	author beebe;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.27.04.25.28;	author beebe;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.27.03.55.02;	author beebe;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.27.03.47.42;	author beebe;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.26.14.34.50;	author beebe;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.24.19.21.06;	author beebe;	state Exp;
branches;
next	1.12;

1.12
date	2002.07.24.14.51.01;	author beebe;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.24.14.44.55;	author beebe;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.20.23.27.23;	author beebe;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.20.22.49.21;	author beebe;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.04.14.43.18;	author beebe;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.15.23.38.28;	author beebe;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.30.17.13.20;	author beebe;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.28.13.16.12;	author beebe;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.27.18.26.14;	author beebe;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.16.18.44.14;	author beebe;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.01.14.42.22;	author beebe;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.12.01.32.40;	author beebe;	state Exp;
branches;
next	;


desc
@Original version
@


1.32
log
@Development snapshot.
@
text
@%% /usr/local/src/hoc/hoc-7.0.6.beta/ChangeLog, Thu Aug  1 10:35:47 2002
%% Edit by Nelson H. F. Beebe <beebe@@math.utah.edu>
%% /usr/local/src/hoc/hoc-7.0.3.beta/ChangeLog, Wed Jan 30 09:18:00 2002
%% Edit by Nelson H. F. Beebe <beebe@@math.utah.edu>
%% /usr/local/src/hoc/hoc-7.0.2.beta/ChangeLog, Sun Jan 27 10:44:21 2002
%% Edit by Nelson H. F. Beebe <beebe@@math.utah.edu>
%% /usr/local/src/hoc/hoc-7.0.0.beta/ChangeLog, Tue Jan  1 06:24:27 2002
%% Edit by Nelson H. F. Beebe <beebe@@math.utah.edu>
%% /usr/local/src/hoc/hoc-7.0.0.beta/ChangeLog, Tue Dec 11 08:25:03 2001
%% Edit by Nelson H. F. Beebe <beebe@@math.utah.edu>

This file records changes in the development of hoc version 7.

hoc versions 1 through 6 are described in the book

	@@String{pub-PH                  = "Pren{\-}tice-Hall"}
	@@String{pub-PH:adr              = "Upper Saddle River, NJ 07458, USA"}

	@@Book{Kernighan:1984:UPE,
	  author =       "Brian W. Kernighan and Rob Pike",
	  title =        "The {UNIX} Programming Environment",
	  publisher =    pub-PH,
	  address =      pub-PH:adr,
	  pages =        "x + 357",
	  year =         "1984",
	  ISBN =         "0-13-937699-2 (hardcover), 0-13-937681-X (paperback)",
	  LCCN =         "QA76.76.O63 K48 1984",
	  bibdate =      "Wed Dec 15 10:36:12 1993",
	}

hoc version 1 supports simple expressions only, while hoc version 6
reaches the level of a language comparable in power to Basic, but with a
syntax similar to a subset of C.

The original hoc is small: a compressed UNIX shar bundle distribution is
only about 10KB, so it can be readily distributed via e-mail and Web
transfers.

Version 7 is quite a bit bigger, but also offers a lot more
functionality, documentation (including an extensive multilingual
online help facility), and testing, and runs on a great many different
GNU, UNIX, and POSIX platforms.

I have used hoc in courses as an excellent example of program
development under UNIX, and as a handy programmable calculator.

The starting point for the hoc version 7 work was Brian Kernighan's
1995 release of hoc, which I originally found in

	ftp://ftp.rahul.net/pub/rhn/hoc.shar.Z

[that URL was still functional on 11 December 2001.]

The official source of the code from the book is found via a link from
Kernighan's home page,

	http://cm.bell-labs.com/who/bwk/

to

	http://cm.bell-labs.com/who/bwk/unixprogenv.tar.gz
	http://cm.bell-labs.com/who/bwk/hoc.sh

A lot has happened to hoc since then, as the log below records!

Here is a list of the major design goals for hoc version 7:

	* Add support for building hoc with the GNU readline library.
	  This makes any interactive software tool vastly more usable,
	  because previous commands can be recalled and edited with
	  great ease.  I have used hoc extensively for several years as
	  a calculator, and my frustrations at the lack of this feature
	  put its addition at the top of my wish list.

	* Keep all changes under RCS (Revision Control System) control,
	  so there is a documented record of hoc development.

	* Make hoc run everywhere, and with every C and C++ compiler.

	* Make hoc an even better, and more powerful, online calculator.

	* Add support for IEEE 754 arithmetic.  The original version,
	  developed on the PDP-11 and VAX architectures, checked for
	  out-of-range values, and aborted computation.  Version 7
	  adheres to the nonstop IEEE 754 computing model, where
	  exceptional values of Infinity and NaN are generated, and
	  propagate through computations.

	* Make hoc a suitable language for testing implementation of new
	  ideas from the discussions of the IEEE 754 committee, which
	  started work in 2000 on a revision of the 1985 IEEE 754
	  Floating-Point Standard.

	* Make hoc a convenient language for prototyping implementations
	  of mathematical functions.  This is facilitated by its
	  provision of a uniform set of underlying IEEE 754 support
	  functions on all platforms.

	* Make hoc a convenient platform for student programming
	  projects to extend a small, but readily understandable, and
	  often, familiar, programming language.

	* Add support for compilation under 1998 Standard C++ as well as
	  1989 (and 1999) Standard C.

	* Make hoc constants, and built-in functions, immutable.  In
	  older versions of hoc, the user could set "PI = 22/7", or
	  "E = 12345", with possible deleterious effects on other code.

	* Add dozens of new mathematical and floating-point functions,
	  essentially the union of the C language math library offerings
	  on all UNIX platforms commonly available in 2001.

	* Add language extensions to support string expressions.

	* Add support for system-wide and user-specific initialization
	  files.

	* Add several command-line options, including --author and the
	  GNU standard --help and --version options. Options may be
	  abbreviated to a unique prefix, and may begin with either one
	  or two hyphens: --author, -author, -auth, and -a are all
	  equivalent.

	* Add a very extensive help facility, implemented as
	  user-defined functions that are loaded at run time, rather
	  than coming from text that is hard-coded into the program
	  source code and executable.  All functions, procedures, and
	  language statements are documented this way, as are the
	  numeric and string expression grammars.  There is also
	  topic-oriented help.

	* Internationalize the help facility.  The existence of certain
	  locale-specific environment variables causes additional
	  language-specific help files to be loaded at startup.  These
	  can augment, or even replace, existing help functions, so that
	  documentation translation can be added, and tested,
	  incrementally.

	* Add GNU autoconfigure support for one-line configuration,
	  build, and installation on any UNIX, GNU, or POSIX platform.

	* Significantly enhance the small original validation suite,
	  using new features of hoc version 7 to produce very clean, and
	  compact test code, to test all of the new functions,
	  procedures, and command-line arguments.

	* Because all hoc variables are (currently) global, adopt the
	  very useful C/C++ programming convention that names that begin
	  with two underscores are reserved for the implementation, and
	  should not be used in user code.  No library function will
	  ever modify any global variable that is not so named.

	* Have fun doing all of the above!

An important lesson of the Kernighan and Pike book cite above, and its
follow-on (but NOT its replacement),

	@@Book{Kernighan:1999:PP,
	  author =       "Brian W. Kernighan and Rob Pike",
	  title =        "The Practice of Programming",
	  publisher =    pub-AW,
	  address =      pub-AW:adr,
	  pages =        "xii + 267",
	  year =         "1999",
	  ISBN =         "0-201-61586-X",
	  LCCN =         "????",
	  bibdate =      "Fri Jan 21 06:58:06 2000",
	  price =        "US\$24.95, CAN\$37.50",
	  URL =          "http://tpop.awl.com;
			  http://cseng.aw.com/bookdetail.qry?ISBN=0-201-61586-X&ptype=0;
			  http://cm.bell-labs.com/cm/cs/tpop/code.html",
	  acknowledgement = ack-nhfb,
	}

is that C (and C++) code should be written to the greatest extent
possible without platform- or implementation-specific conditionals.
Otherwise, if there are N #if ... #else ... #endif blocks with
independent conditions, then there are 2^N versions of the program,
making testing of all of them impractical.

In hoc version 7, there are quite a few such conditionals, but they are
very controlled, and serve these valuable purposes:

	* testing for the availability of particular language features
	  (mostly, header files and extended library functions that may
	  not be universally available, or whether compilation is by C
	  or C++ compilers);

	* testing for host arithmetic features that cannot be safely
	  done at run time on all platforms;

	* defining local installation-dependent locations of files that
	  are loaded at run time;

	* making compile-time definition of array sizes possible, with a
	  fallback to suitable defaults in the absence of such external
	  definitions, eliminating the need to ever edit the source code
	  to change fixed dimensions that later turned out to be
	  inadequate.

The most important aspect of these conditionals is that EVERY SINGLE
SUCH USER-ACCESSIBLE PREPROCESSOR SYMBOL is defined (or undefined) in
a SINGLE place, the config.h file, and importantly, that file is
created COMPLETELY AUTOMATICALLY, CORRECTLY, and RELIABLY, by a
computer program at installation time.  No human intervention whatever
should ever be needed to set any of these symbols.

The processor symbols used fall into four categories:

	* Integer constants (0 and 1), used to logically select
	  between two blocks of code during development.  Most,
	  perhaps all, will vanish in the final release.

	* GNU-standard feature test symbols: HAVE_STDLIB_H,
	  HAVE_ACOSH, HAVE_IEEE_754, ... that test for the presence of
	  a feature, NOT for a particular implementation that happens
	  to provide that feature.

	* Computer language flags: __STDC__, __cplusplus, c_plusplus,
	  and lint.

	* Language-defined standard symbols: currently only DBL_MAX.

	* Rarely, platform-specific flags: currently,

		_POWER  	    __i486  	      __i860  		__power
		__alpha 	    __i586  	      __ia64  		__PPC
		__hppa  	    __i686  	      __mips  		__sparc
		__i386

	  At present, these appear ONLY in three functions, in
	  ieee754.c: IsQNaN(), IsSNaN(), and SNaN().  They are
	  essential, and unavoidable, because these two functions need
	  to know about the underlying hardware representation of
	  quiet and signaling NaNs.  Those properties are defined in
	  architecture specification books, and CANNOT be determined
	  by run-time tests.

Interestingly, other floating-point properties, like tests for
Infinity and NaN, can be done without ANY magic constants or
preprocessor conditionals, as can the generation of Infinity and NaN.
The machine epsilon, macheps(x), was originally implemented as a hoc
function that is loaded dynamically, instead of in C code, but later
migrated to C code when it became necessary in the hoc kernel.

Similarly, the little-endian versus big-endian addressing issue can be
easily resolved at run time, so the small amount of code that needs
this information can be written completely portably.  A single test
function, IsBigEndian(), in ieee754.c localizes the test in one place.

For efficiency, some functions memoize their results to avoid repeated
identical computations: in ieee754.c, Macheps(), Infinity(),
MaxNormal(), MinNormal(), MinSubnormal(), and NaN() all do this.
SNaN() does not, because each call produces a unique signaling NaN.

------------------------------------------------------------------------

2002-08-08 16:29:29-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Freeze code snapshot for version 7.0.6.beta.

------------------------------------------------------------------------
2002-08-08 15:59:10-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.6.beta.  Today's work adds
	  the long-wanted support for functions that return strings.

	* code.c: Add ensurenum() and ensurestr() macros to simplify
	  coding.

	* code.c hoc.h init.c string.c: Rename StoN to StoF, for
	  symmetry with FtoS.

	* decrypt.hoc, encrypt.hoc: Revise code to use the new
	  string-returning function capability.

	* test*/cryptodemo.hoc test*/okay/cryptodemo.{out,err}
	  test*/cryptotest.hoc test*/okay/cryptotest.{out,err}: New test
	  files to demonstrate and exercise the encryption and
	  decryption code.

	* fp_t.h: Fix typo in comment.

	* hoc.rc: Update news_hoc_7_0_6_beta().
	
	* hoc.y: Add grammar rule to allow functions to return strings.
	  Remove no-longer-used nbuf in yygetid().

	* ieee754.c: Revise overriding declarations of missing library
	  functions.

	* io.c: Fix memory leak in path_fopen().

------------------------------------------------------------------------

2002-08-07 18:58:58-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.6.beta.  Today's work continues
	  tuning and simplifying of the string expression grammar with a
	  goal of eventually eliminating the distinction between numeric
	  and string values in most of the grammar, relegating checks to
	  run time, as awk does.

	* code.c: Add new functions popnum() and popstr() and use them
	  in many places to support dynamic number<->string conversion.
	  Update constpush() and eval() for dynamic type conversion.
	  Update assign() and str_assign() to eliminate the restriction
	  on type conversion of existing variables.  Replace the four
	  str_concat_[ns][ns]() functions with a single one,
	  str_concat().  Eliminate the no-longer-used str_to_symnum()
	  and str_to_symstr(); their jobs are now handled by the new
	  SymtoN() and SymtoS() functions, since the hoc symnum() and
	  symstr() functions are now in function tables in init.c,
	  instead of in the hoc grammar.

	* crypto.hoc: Add additional comments and tests.

	* decrypt.hoc and encrypt.hoc: Update to use named instead of
	  numbered arguments.

	* fortune.hoc: Update to use named instead of numbered
	  arguments. Add four new fortunes.

	* hoc.1: Add additional documentation about the global
	  statement.

	* hoc.h: Remove declarations of functions that, through recent
	  changes, can now be static.  Add declarations of concat6(),
	  SymtoN(), and SymtoS().

	* hoc.rc: Add some needed global statements.

	* hoc.y: Add anyexpr to %type <inst> list.  Generalize grammar
	  rules for strasgn, strexpr, and expr.  Change internal names
	  of local variables to include the function/procedure name.
	  Change some type assignments to UNDEF in yygetlocal().  Revise
	  and add some DEBUG_YYLEX conditional debugging statements.

	* init.c: Add symnum and symstr to function tables; they were
	  overlooked in the major grammar simplification a few days ago.

	* pushd.hoc: Rename ___k to k, since function/procedure internal
	  variables are no longer global by default.

	* require.hoc: Add some needed global statements.

	* string.c: Add new concat6() function.

	* symbol.c: Make first_symbol_name(),
	  next_matching_symbol_name(), and next_symbol_name() static.

	* time.c: Add another bounds check on rlim.rlim_cur to prevent
	  it exceeding rlim.rlim_max; this is necessitated by behavior
	  of the HP NUE IA-64 emulator.

------------------------------------------------------------------------
2002-08-06 07:16:34-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.6.beta.  This is long-needed major
	  change to named, rather than numbered, arguments, and default
	  of local, rather than global, variable visibility.  The old
	  default of global visibility makes it extremely difficult, and
	  error prone, to write large packages in hoc.

	* hoc.1: Document new function/procedure named-argument syntax,
	  and new global statement.  Update examples to used named,
	  rather than numbered, function/procedure arguments.

	* hoc.h: Add function prototype for new is_local() function.

	* hoc.rc: Update functions and procedures to used named, rather
	  than numbered, arguments.

	* hoc.y: Add support for named function/procedure arguments, the
	  global statement, and new default of local, instead of global,
	  visibility of body variables.  This requires several new
	  static variables, new functions (addarg(), addglobal(),
	  free_argnamelist(), free_globallist(), is_global(), nth_arg(),
	  symtype(), and yygetlocal()), and additional grammar rules
	  (argnames, beginargs, endargs, enddefn, and globalnames).  By
	  remapping argument names to argument numbers in yygetid() and
	  yygetlocal(), no changes are needed in the virtual machine in
	  code.c.  Yet to be fixed is the syntactical peculiarity that
	  for an argument, n, n++ is rejected, but n=n+1 is accepted
	  (this is historical, and noted in the BUGS section of hoc.1).

	* init.c: Add global to the keywords[] table.

	* io.c: Add check to exclude local variables in save_symbols().

	* symbol.c: Add new function is_local().

	* annuity.hoc expm1.hoc log1p?.hoc primes.hoc show-strftime.hoc
	  sunmath.hoc, test*/*.hoc: Update to used named, rather than
	  numbered, function/procedure arguments.

------------------------------------------------------------------------
2002-08-02 12:39:13-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.6.beta.

	* code.c: Remove indent_pending, which is no longer needed
	  since the rewrite of prtext2().  Remove erroneous call to
	  discard_string() in str_assign(): it caused a nasty bug from
	  memory freed while in use elsewhere.

	* help.hoc: Minor tweak in help_nextafter().

	* ieee754.c: Add preprocessor conditional in Nextafter() to avoid
	  use of native nextafter() on SGI systems, since that version
	  fails to handle NaN and Infinity arguments correctly.

	* io.c: Add missing dupstr() call in Cd() to guarantee that the
	  returned value is always a dynamic string.

	* symbol.c: Add symbol table debugging code in
	  delete_symbol_unchecked(), install(), and lookup().
	  Parenthesize arguments in two calls to memcpy() and memcmp() so
	  that the (void*) cast works as intended.

------------------------------------------------------------------------
2002-08-01 10:27:22-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.6.beta.

	* TO-DO, help.hoc, hoc.1, hoc.rc, hoc.y, io.c, test*/okay/*:
	  Rename the misnamed __LINENO__ to __LINE__; my original
	  intention was to follow Standard C, but I goofed.

	* code.c: Add new functions prchar(), pronechar(), and prtext3(),
	  and replace body of prtext2().  All output from hoc print,
	  printf, and println statements now ultimately goes through
	  pronechar(), which ensures that any required indentation is
	  supplied at the start of a new line, completing full support for
	  the __INDENT__ variable.

	* hoc.1: Document snan().

------------------------------------------------------------------------
2002-07-31 11:02:08-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Begin work on version 7.0.6.beta.  Today's changes are a
	  cleanup in the hoc grammar, eliminating special rules for
	  functions that can now be supported properly via the builtin
	  function tables in init.c, but could not earlier when string
	  support in the grammar was absent, or incomplete.

	* code.c: Delete abort_user(), hex(), hexfp(), hexint(),
	  numtostr(), str_index(), str_length(), str_strftime(),
	  str_substr(), str_to_num().  Rewrite Defined() and Delete().
	  Add bltin1i(), bltin2s(), strbltin2sn(), and strbltin3snn().
	  Add code in fmtnum() to print negative zero properly, since
	  printf() on several systems fails to do this.  The hoc printf
	  and sprintf statements use the C printf(), so they still have
	  a problem with negative zero.

	* configure.in: Update PACKAGE_DATE and PACKAGE_VERSION.

	* help.hoc: Add decrypt() and encrypt() to
	  help_string_functions(), and add help_decrypt() and
	  help_encrypt().  Update help_NaN(), help_snan(), and
	  help_help().

	* hoc.h: Add new typedefs for F1i_t, F2s_t, SF2sn_t, and SF3snn_t,
	  and corresponding declarations in the Symbol union.  Remove or
	  replace declarations of Abort(), abort_user(), Defined(),
	  Delete(), hex(), hexfp(), hexint(), numtostr(), str_index(),
	  str_length(), str_strftime(), and str_substr().  Add
	  declarations of FtoS(), Hex(), Hexfp(), Hexint(), Substr(),
	  Index(), Length(), StoN(), bltin1i(), bltin2s(), strbltin2sn(),
	  and strbltin3snn().

	* hoc.rc: Update date and version number in banner, update
	  feature list in news_hoc_7_0_5_beta(), and add
	  news_hoc_7_0_6_beta().

	* hoc.y: Major update in %token <sym> lists and grammar rules to
	  remove many function names from the grammar.  Rename othername
	  to otherword (to resemble `keyword').  Add grammar rules for
	  BLTIN1I, BLTIN2S, STRBLTIN2SN, and STRBLTIN3SNN.

	* init.c: Move many function names from the keywords[] table
	  into function tables.  Add new builtins_1i[], builtins_2s[],
	  strbuiltins_2sn[], and strbuiltins_3snn[] tables, and
	  corresponding initialization code in init_builtins().  Add
	  snan() to builtins_0[] table.  Use function typedef names in
	  struct definitions.

	* io.c: Update the case labels in the switch statement in
	  save_symbols() to reflect new function types.

	* string.c: Add new functions: Abort(), FtoS(), Hex(), Hexfp(),
	  Hexint(), Index(), Length(), StoN(), and Substr().

	* symbol.c: Revise dump_syms() and make_pname() to handle names
	  for the new function types, and delete code corresponding to
	  functions moved from the grammar rules into function tables.

	* time.c: Change Strftime() to return a dynamic string.

------------------------------------------------------------------------
2002-07-30 14:39:35-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Freeze code snapshot for version 7.0.5.beta.

------------------------------------------------------------------------
2002-07-30 10:41:46-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.5.beta.  Today's work eliminates
	  memory leaks in the handling of string expressions in hoc, and
	  simplifies many functions in code.c.

	* code.c: Major update to deal with problem of memory leaks.
	  Previously, some string Datum values pushed were dynamic
	  strings, and others were static or strings in use elsewhere.
	  This produced memory leaks during handling of string expressions
	  that could not be eliminated until all pushed strings were made
	  dynamic, so they can be freed after they have been popped and
	  used.  All builtin functions now return dynamic strings, so they
	  too can be discarded after use.  The getxxx() and getxxx()
	  macros have been revised to ensure that their arguments are
	  referenced only once, since that guarantee simplifies code in
	  many functions in this file.  Add function discard_string() to
	  free the popped Datum strings.  Change protect() to Protect().
	  Add new pushstr() and pushnum() functions to simplify the code
	  in 70+ places, replacing two or more lines with one in each
	  instance, and eliminating many local Datum variables.

	* hoc.h: Add definition of STREQUAL() and declarations of
	  Msg_Translate() and free_symbol_table(), and change protect() to
	  Protect().

	* hoc.y: Change get_locale_filename() to return a dynamic string,
	  and free it after use.  Change string equality tests to use
	  STREQUAL().   Free strings returned from Fopen() and Putenv().
	  Add final cleanup calls in main() to irl_free() and
	  free_symbol_table().

	* init.c: Add comment that all builtin string functions must now
	  return dynamic strings.  In structure initializations, change
	  msg_translate to Msg_Translate, and protect to Protect.  Remove
	  definition of STREQUAL: it has been moved to hoc.h.

	* io.c: Change string equality tests to use STREQUAL().  Change
	  msg_translate() call to Msg_Translate(), and protect() to
	  Protect().  Change builtin string functions to return dynamic
	  strings.  Add code to Load() to free strings after an open
	  failure.  Add Msg_Translate() wrapper function.  Simplify buf
	  handling in Pwd().

	* match.c: Correct stupid typo in match_range(): == should have
	  been =.

	* readline.c: Add new function irl_free() and use it in irl_gets()
	  instead of the old code which now forms its body.  Free
	  this_line in irl_readline() at end of file.

	* readline.h: Add declaration of irl_free().

	* string.c: Change builtin string functions to return dynamic
	  strings.  Change string equality tests to use STREQUAL().

	* symbol.c: Add new free_symbol_table()	function that main() can
	  use during final clean up.  Change string equality tests to use
	  STREQUAL().

	* time.c: Change Now() to return a dynamic string.

------------------------------------------------------------------------
2002-07-28 08:18:47-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.5.beta.  Today's work adds
	  ftoh() and htof() for conversion between native floating-point
	  and hexadecimal representations thereof, and the sprintf statement.

	* code.c: Add new functions sprexpr(), sprfmt(), sprfnum(),
	  sprftext(), sprjoin(), sprnum(), sprstr(), and sprtext() to
	  support the sprintf statement.  Most of the support code for
	  printf and sprintf should be shared, but for now, I wanted to
	  make minimal perturbations on the existing code. In
	  str_assign(), free the d2 string memory, plugging a memory leak.

	* help.hoc: Add new functions help_ftoh() and help_htof(),
	  and list them in help_string_functions().

	* hoc.h: Add declarations of FtoH(), HtoF(), sprexpr(), sprfmt(),
	  sprjoin(), and sprstr().

	* hoc.1: Document ftoh(), htof(), and sprintf statement.

	* hoc.y: Add SPRINTF to %token list and to keyword and strexpr
	  grammar rules.  Add sprflist grammar rule.  Add sprflist to inst
	  list.  At end of main(), free the prog memory.

	* init.c: Add htof to builtins_1s[], and ftoh to
	  strbuiltins_1n[].  Add SPRINTF entry to the keywords[] table.

	* string.c: Add new functions FtoH(), HtoF(), and htou().

	* test*/{ftoh_htof,sprintf}.hoc, test*/okay/{ftoh_htof,sprintf}.*:
	  New test files.

------------------------------------------------------------------------
2002-07-27 11:28:26-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.5.beta.

	* code.c: Revise setdatum{num,str,sym}() to save the RHS in
	  a temporary variable, zero the Datum union, and do the
	  assignment, preventing later reference to garbage bits
	  on systems where sizeof(void*) > sizeof(fp_t).

	* configure.in: Add search paths for CP, LN, LS, MV, RM, and
	  SHELL.  The intent is to have save/Makefile be more portable.

	* help.hoc: Add char() and ichar() to list of string functions.

	* hoc.1: Document new --trace-file-opening option. Add new
	  ENVIRONMENT VARIABLES section. Change path of installed locale
	  files.  Insert backslash before caret in one code example to
	  prevent a font change.

	* hoc.rc: Update set_locale() to reflect the new installation
	  directory path for locale files.

	* hoc.y: Add support for new --trace-file-opening option in
	  do_post_args(), do_pre_args(), and usage().  Update
	  get_locale_filename() to add /locale/ to the directory path.

	* locale/*/translations.hoc translations.hoc: Update with entries
	  for new message strings added in recent hoc versions.

	* locale/en/hoc.rc: Replace with current copy of hoc.rc.

	* Makefile.in: Revise to install locale directories under
	  $(shrlibdir)/locale instead of under $(shrlibdir)/, to clean
	  up the installation tree, and make it conform to the structure
	  of the hoc source tree.

	  Set SHELL explicitly, since recent autoconf releases override
	  configure.in's setting of SHELL, sigh...


	* symbol.c: Revise erealloc() to call malloc() when the pointer
	  is NULL, because pre-Standard-C realloc()'s do not handle that
	  case.

	  In install(), call memset() to clear the symbol table before
	  setting fields in it: the union element sizes differ across
	  platforms, and on some not all bits are cleared by the
	  assignments, leading to possible later reference to garbage
	  bits.

------------------------------------------------------------------------
2002-07-26 08:06:43-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.5.beta.  Today's work adds support
	  for break and continue statements in `for' and `while' loops,
	  plus support for debug tracing of the hoc virtual machine.  It
	  also fixes a subtle bug that was present in the original hoc 6
	  in the 1984 book.

	* code.c: Add declarations of breaking, continuing, and inloop
	  flags.  Add declarations of code_argname, code_name_table[], and
	  debug_code that are enabled only when the preprocessor symbol
	  DEBUG_CODE is defined.  Add new functions breakstmt() and
	  continuestmt().  Initialize breaking and continuing in
	  initcode().  Add code in forcode() and whilecode() to support
	  the new break and continue statements.  In execute(), test
	  breaking and continuing in the loop condition, and add debug
	  tracing in the loop body (enabled when DEBUG_CODE is defined).

	* help.hoc: Update help_for(), help_while(), and help_statement().
	  Add help_break() and help_continue().

	* hoc.h: Add declarations of breakstmt() and continuestmt().

	* hoc.ssh: Add new a2ps style sheet file for simple prettyprinting
	  of hoc code.

	* hoc.y: Add declarations of code_argname and debug_code that are
	  enabled only when the preprocessor symbol DEBUG_CODE is defined.

	  Add declaration of new global inloop, and add new tokens BREAK
	  and CONTINUE to %token list.

	  Add new subrules for BREAK and CONTINUE in stmt rule and keyword
	  rule.

	  Fix long-standing bug in handling of return statement, present
	  in the 1984 book: the action for RETURN was missing an
	  assignment to $$, producing a core dump:

		% hoc-6.0
		proc f() {if ($1 == 0) return }
		f(1)
		f(0)
		Segmentation fault (core dumped)

	  Putting the return inside a compound statement eliminated the
	  error:

		% hoc-6.0
		proc f() {if ($1 == 0) {return} }
		f(1)
		f(0)

	  With the assignment to $$, both code samples work correctly.

	  Revise rules for `for' and `while' statements in stmt rule to
	  increment and decrement the inloop flag around the parsing of
	  the loop body, so that illegal use of break and continue outside
	  loops can be detected (the return statement in hoc 6 was handled
	  the same way).

	  Add new looponly() function to report illegal placement of break
	  and continue statements.

	* init.c: Add BREAK and CONTINUE entries in the keywords[] table.

	* Makefile.in: Add SSHDIR and SSHFILES variables, and install-ssh
	  and uninstall-ssh targets.

	* test*/Makefile: Add break.hoc and continue.hoc to CHECK_G list.

	* test*/{break,continue}.hoc, test*/okay/{break,continue}.*:
	  New test files.

------------------------------------------------------------------------
2002-07-24 13:16:07-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.5.beta.

	* configure.in: Add test for HAVE_SNPRINTF_PROTOTYPE to resolve
	  conflicts between vendor header files.

	* help.hoc: Fix indentation of one line in help_string_syntax().
	  Add char() and ichar() to the function list in
	  help_string_functions().

	* hoc.h, readline.c: Include prototype for snprintf() if
	  HAVE_SNPRINTF_PROTOTYPE is not defined.

	* string.c: Rewrite one line of Char() to avoid getting
	  incorrect results on IBM AIX 4.2 with g++ 2.95.3.

------------------------------------------------------------------------
2002-07-23 18:58:34-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work on version 7.0.5.beta.  Today's work adds
	  the Fortran-like char() and ichar() hoc functions, and permits
	  implementing one-time pad encryption/decryption algorithms in
	  encrypt.hoc and decrypt.hoc, with a simple test in crypto.hoc
	  (I wanted these for a lecture demonstration).

	* code.c: Add support for %c format item.  Add new functions
	  bltin1s() and strbltin1n().

	* help.hoc: Add help_char() and help_ichar().

	* hoc.1: Move documentation of print, println, and printf from
	  the function subsection into the following statement
	  subsection, and document the new printf support, and the new
	  char() and ichar() functions.

	* hoc.h: Add new typedefs for F1s_t and SF1n_t, and
	  corresponding union members ptr1s and sptr1n.  Add prototypes
	  for Char(), Ichar(), bltin1s(), and strbltin1n().

	* hoc.y: Add new %token members BLTIN1S and STRBLTIN1N, and add
	  them to the othername rule, and to the expr and string rules,
	  respectively.

	* ieee754.c: Add two STORE() wrappers in Ceil().

	* init.c: Add new builtins_1s[] and strbuiltins_1n[]
	  initializers, and code in init_builtins() to install their
	  data in the symbol table.

	* string.c: Add new Char() and Ichar() functions.

	* test*/char.hoc and test*/okay/char.{err,out}: New test files.

	* test*/Makefile: Add char.hoc to CHECK_G list.

------------------------------------------------------------------------
2002-07-22 19:37:22-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Begin work for version 7.0.5.beta.

	* configure.in:  In the Sun-specific section, add code to find
	  the location of the native compiler directory containing
	  <sunmath.h>, and add suitable -I values to both CFLAGS and
	  CPPFLAGS so that AC_CHECK_HEADERS() works properly.  Builds
	  with gcc and g++ on Sun Solaris are now free of configuration
	  problems.

	* ieee754.c: Provide a new implementation of Ceil() that appears
	  to be considerably cleaner and more portable than the
	  bit-fiddling version that is used in the Sun fdlibm
	  (freely-distributable math library), and use it to implement
	  Floor().  The new code does not require conversion to an
	  integer data type, thereby eliminating the problems of
	  wraparound to negative values when the floating-point value is
	  too large to represent as an integer.

------------------------------------------------------------------------
2002-07-20 16:59:58-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Freeze code snapshot for version 7.0.4.beta.

	* configure.in: Add HAVE_GETPPID, HAVE_LONG_LONG_FORMAT_L,
	  HAVE_LONG_LONG_FORMAT_LL, ETAGS, and associated configure-time
	  tests for the long long format descriptor length modifiers.

	* fp_t.h: Add EXTERN to declaration of strtold().

	* hoc.y: Change "(void)code" to macros "CODE" to reduce clutter.

	  Add prflst to inst list and associated grammar rule to complete
	  the support for printf.

	  Generate code to call prsep at output list commas, eliminating
	  the inconsistent handling of numbers and strings.

	  Add code to recognize "**" as a synonym for "^", to facilate
	  copy-and-paste of Fortran code into hoc.

	  Add support for __NATIVE_GETPPID__ and __PPID__ builtin
	  constants.

	  In warning (), output a newline on stderr before printing any
	  error message, to prevent it from being confusingly embedded in
	  any output-in-progress.

	  In the grammar rule for string expressions, for the case "expr
	  VAR", call str_concat_ns() instead of str_concat_nn() to make "x
	  = 123ABC" produce a string value "123" (assuming ABC is
	  undefined, and thus, evaluates to an empty string).  Previously,
	  ABC would be evaluated as a number, which is 0 if ABC is
	  undefined, and the result would be "1230".  The new behavior
	  conforms to what awk does.

	* ieee754.c: Add implementation of copysign() for those systems
	  that lack it.

	* readline.h: Add definition of EXTERN, which is now needed
	  because fp_t.h requires it.

	* string.c: Add protecting "&& !defined(HAVE_STRTOLD)" to
	  preprocessor wrapper around strtold().  Ours calls sscanf(), and
	  the HP/Compaq/DEC Alpha OSF/1 sscanf() calls strtold(),
	  producing an infinite loop and stack overflow without this
	  protection.

------------------------------------------------------------------------
2002-07-18 11:06:01-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work for version 7.0.4.beta.

	* code.c: Eliminate trailing space output by prexpr(), and add
	  new function prsep() to output the current value of __OFS__ (see
	  below).

	* configure.in: Add test for getppid().

	* help.hoc: Add 67 new help_xxx() procedures after comparing the
	  output of who("*") with a list of existing help procedures.  All
	  hoc built-in variables are now documented.

	* hoc.h: Add declaration for prsep().

	* hoc.y: Extend output list grammar for print and println
	  statements to generate code to call prsep() for each comma
	  separator, eliminating the inconsistent handling of numbers and
	  strings.  Add initialization of __NATIVE_GETPPID__ and __PPID__.

	* ieee754.c: Add special code in Copysign() to handle inverted
	  sign of NaN on Intel IA-32 and HP/Compaq/DEC Alpha
	  architectures.

	* init.c: Define __OFS__ (output field separator) in
	  init_builtins() to a blank.  The name comes from awk's OFS
	  built-in variable, but follows hoc's convention of leading and
	  trailing underscores for built-in variables.

	* annuity.hoc help.hoc hoc.rc test*/*.hoc: Remove spaces at end of
	  strings in the middle of print/println output lists, since
	  today's changes eliminate the need for them.

------------------------------------------------------------------------

2002-07-17 07:53:41-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work for version 7.0.4.beta.

	* Complete support for printf.  Add new grammar rule prflist in
	  hoc.y.  Add new functions add_fmt_item(), fmt_free(),
	  fmt_free_nth(), make_fmt_strings(), prfmt(), prfnum(), and
	  prftext() in code.c, along with associated private variables.

	* hoc.h: Add declarations of match() and prfmt().

	* Add new macros CODE(), CODE2(), CODE3(), and CODE4() in hoc.y
	  to hide numerous (void) casts.

	* Add new global variable __INDENT__ in code.c and init.c to
	  give the user control over the indentation of hoc output.
	  Full support for this option requires that the output
	  character stream be examined for newlines; this is only
	  partially complete (printf output is not yet examined).

	* configure.in: Update PACKAGE_DATE, and add check for ETAGS.

	* string.c symbol.c: Split calls to prtext() into calls to
	  prtext() and prnl() (see __INDENT__ comments above).

	* io.c string.c symbol.c: Change calls to is_match() to match(),
	  and rename prefix to pattern, so that printenv(), save(), and
	  who() are generalized to support UNIX-shell-style patterns
	  instead of simple prefixes.

	* hoc.y: in warning(), output a newline on stderr before the
	  caller's message, to ensure that the warning is visible.

	* match.c: New file with match() function (and a private test
	  main program, enabled by -DTEST).

	* symbol.c: Update is_match() to call new match() function.

	* Makefile.in: Add match.c to SRCS and PRSRCS.  Add ETAGS
	  and TAGSRCS variables.  Fix error in directory test in the
	  install-xlt commands that prevented the translation files from
	  being installed.

------------------------------------------------------------------------

2002-07-12 07:14:29-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work for version 7.0.4.beta.

	* Add function matula() in hoc.rc, and procedure help_matula()
	  in help.hoc; I got tired of looking Matula's formula up.

------------------------------------------------------------------------
2002-06-23 11:53:50-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work for version 7.0.4.beta.

	* ft_t.h: Add #undef for all math functions that are later
	  redefined.

	  Always supply prototype for strtold(), since some systems lack
	  it, even when it is in the native library.

	* math.c: Add better definition of fallback version of log1p(),
	  which does, however, rely on an accurate underlying log().


2002-06-22 16:15:20-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work for version 7.0.4.beta.

	* init.c: Initialize __PROMPT__ in init_builtins().  If it is not
	  defined, and a startup file defines it via assignment, an
	  incomplete definition may exist for a time during the statement
	  parse, and if the statement spans multiple lines, then
	  __PROMPT__ may be evaluated before it is fully defined,
	  producing a NULL pointer dereference error.

	* fp_t.h: Add missing redefinitions of log1p(x) family.  That was
	  the only function used to math.h that was in the wrong precision
	  in the quadruple-precision and single-precision versions of hoc,
	  as verified by examination of the undefined externals in math.o
	  by:
	  	nm math.o | grep U | awk '{print $2}' | sort | fmt

	* hoc.y: Add definitions of __NATIVE_xxx__ for all mathematical
	  functions xxx().

	* code.c hoc.y io.c readline.c string.c: Remove (void) cast on
	  SNPRINTFn() calls, since they now expand into do {...} while (0).

	* string.c: Increase size of hexadecimal floating-point buffer in
	  xfptos(); it was too small for the case of quadruple-precision
	  numbers, and SNPRINTFn() (added at the beginning of the work on
	  this version) safely prevented buffer overrun, truncating the
	  generated numbers.  Although snprintf() returns a value that can
	  be used to detect the need for a larger buffer, until now, its
	  return value has been ignored.  I have therefore changed the
	  SNPRINTFn() definitions in hoc.h to report a buffer-too-small
	  warning when this happens, and made a temporary change to verify
	  that the warning will indeed be issued when necessary.

------------------------------------------------------------------------
2002-06-15 15:25:16-0600  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Continue work for version 7.0.4.beta (last work was on
	  19-Feb-2002).

	* Fix serious hoc80/hoc128 bug: there were two instances of
	  numbers being converted as double instead long double,
	  effectively eliminating the ability to input fractional numbers
	  with precision greater than double (argh...).  This required
	  changes in configure.in (new test for strtold()), fp_t.h, hoc.h,
	  init.c, math.c, readline.c, and string.c, plus updated
	  documentation in help_hoc().

	* Fix serious (but rare) bug discovered this morning that led to a
	  segment violation failure: delete(foo) left the symbol table
	  corrupted, because a critical pointer update in
	  delete_symbol_unchecked() in symbol.c was missing.

	* Add support for subnormals on SGI IRIX 6.x systems in hoc.y:
	  this requires calling a nonstandard library routine at run-time.
	  None of the SGI C/C++/Fortran compilers otherwise enable such
	  support by default.  SGI's "man sigfpe" gave me the necessary
	  hints to fix this long-standing annoyance on IRIX.  Originally,
	  I thought that lack of subnormals was a limitation of MIPS CPUs,
	  but after rereading relevant portions of two MIPS architecture
	  books that said that subnormals can be supported with software
	  help, I went digging through SGI's manual pages until I found
	  the solution now implemented in hoc.

	* Add two new features: functions double() and single() (for
	  precision reduction), and support for Fortran D, d, Q, and q
	  exponent letters, C/C++ L, l precision suffixes, and C/C++/Java
	  F, f precision suffixes.  The rarely-used Java D, d precision
	  suffixes are NOT supported because they introduce a grammatical
	  ambiguity with Fortran exponents: 2.34d+45 would be 2.34 *
	  10**45 in Fortran, but (2.34) + 45 in Java.

------------------------------------------------------------------------
2002-02-18 00:58:44-0700  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Begin work on version 7.0.4.beta.

	* Replace sprintf() references by macro wrappers SNPRINTFn().
	  configure will now check whether the safer snprintf() function
	  is available, and use it where possible.  Otherwise, SNPRINTFn()
	  just falls back to the unsafe sprintf(), which has no way to
	  check for buffer overrun.


------------------------------------------------------------------------
2002-01-30 09:18:55-0700  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Freeze code snapshot for version 7.0.3.beta.

	* This is a maintenance release: there are no new features in hoc,
	  but the code incorporates changes to make hoc work with more
	  compilers, and in particular, with compilers that silently
	  implement long double as double.  There is also a new file,
	  SYSBUGS, in the distribution, to document bugs discovered on
	  the development test systems.

	* Makefile.in: Add the new SYSBUGS and fp_arch.h files to the
	  dependency lists.

	* code.c: Add code to handle the case of long double
	  masquerading as double.

	* configure.in: Add fix for readline header file test that fails
	  with strict compilers because of non-Standard-C code in system
	  header files.

	* fp_t.h: Correct a few macro definitions, and move variable
	  declarations into hoc.h.

	* fp_arch.h: New file to localize tests for compiler-dependent
	  symbols, reducing them to a single FP_ARCH_xxx symbol unique
	  to each floating-point architecture, and simplifying
	  preprocessor tests elsewhere.

	* hoc.h: Add new variable declarations moved from fp_t.h.
	  Add new typedefs DP_Parts, QP_Parts, SP_Parts.  Revise
	  lcc-specific code block, so that we properly handle
	  --with-long-double builds.  Parenthesize function names in
	  prototypes to protect against macro expansion.

	* ieee754.c: Simplify code in IsQNaN(), IsSNaN(), and SNaN() by
	  splitting out the three precision-dependent blocks into new
	  private functions, IsQNaN{32,64,128}(), IsSNaN{32,64,128}(), and
	  SNaN{32,64,128}(), and using the new FP_ARCH_xxx symbols from
	  fp_arch.h, instead of compiler-dependent ones.

	  Add code to handle the case of long double masquerading as
	  double.

	  Fix bug in Nextafter() in one branch of the long if statement:
	  the old code had macheps(x)/BASE, which is wrong when x == 0.

	* init.c: Add new functions check_range() and sanity_check(), to
	  prevent execution when certain critical constants are set
	  incorrectly.

	* string.c: Add code to handle the case of long double
	  masquerading as double.

------------------------------------------------------------------------
2002-01-27 10:44:09-0700  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Freeze code snapshot for version 7.0.2.beta.

	* The major change for this release is the addition of support for
	  all floating-point precisions: C/C++ types float, double, and
	  long double.  These are made available via the --with-float,
	  --with-double, and --with-long-double configure options.

	* The IEEE 754 draft has been examined for additional features,
	  and the built-in functions class() and unordered(x,y), and the
	  <> (less than or greater than) binary operator has been added to
	  the language.  No IEEE 754 rounding control features are
	  supported yet in hoc.  New built-in constants BASE, CLASS_xxx,
	  EBIAS, EBITS, EMAX, EMIN, and P have been added.

	* The Sun Solaris C/C++ library support has been examined, and
	  implementations of all of the extensions, except for the
	  peculiar trigonmetric functions whose arguments are multiples of
	  PI, have been added to hoc in the annuity and sunmath libraries.

	* Add find-missing-help.awk and find-missing-help.sh, and use
	  them to find, and fix, library functions and procedure for which
	  corresponding help_xxx() procedures are missing.

	* Rename the typedef DoubleParts to FP_Parts, and xdlbtos() to
	  xfptos(), and wrap all floating-point constants in the FP()
	  macro (to provide a suitable precision suffix), since three
	  different precisions are now supported.

	* Makefile.in: Change SUBDIRS from test to the list test32 test64
	  test80 test128, since four different test suites are now
	  required (though most tests are identical in each), add
	  HOCSUFFIX support so that installed executables reflect their
	  precision, and update the dependency lists for store.[ios].

	* PROBLEMS: Log more system problems discovered during testing.

	* TO-DO: Update with an item about Sun Solaris math library
	  extensions.

	* code.c: Add ltgt() function for support of the new <> binary
	  operator.   Update for support of three precisions.

	* configure.in: Update version number, and add support for
	  --with-float, --with-double, and --with-long-double options.
	  Add workaround for broken significand() on GNU/Linux systems.

	* fp_t.h: Add CONS() and FP() macros, and include <math.h> and
	  <sunmath.h> (where available).  Add remappings of
	  double-precision functions to float and long double equivalents,
	  depending on the selected precision, and add many workarounds
	  for deficiencies in various systems' header files and libraries.

	* help.hoc: Document the new BASE, CLASS_xxx, EBIAS, EBITS, EMAX,
	  EMIN, and P built-in constants, and the new class() and
	  unordered() functions.

	* hoc.1: Update for version 7.0.2.beta.

	* hoc.h: Change DoubleParts to FP_Parts.  Add support for three
	  precisions.  Define the CLASS_xxx constants.  Rename xdbltos()
	  to xfptos().  Add prototypes for Class(), MaxSubnormal(),
	  Unordered(), ltgt(), and workarounds for deficiencies in system
	  header files.

	* hoc.y: Add missing ARGS() wrappers on two function prototypes.
	  Add LTGT token for new <> binary operator, and corresponding
	  grammar rules.

	* ieee754.c: Add support for three precisions, and implementations
	  of the new Class(), MaxSubnormal(), and Unordered() functions.
	  Add private ldexpf(), ldexpl(), and remainderl()
	  implementations.

	* init.c: Add support for three precisions, and for the new BASE,
	  CLASS_xxx, EBIAS, EBITS, EMAX, EMIN, P, and MAXSUBNORMAL
	  built-in constants.  Make default_precision() remember its
	  computed answer to speed subsequent calls.  Add new
	  init_fp_globals() function.

	* io.c: Rename xdbltos() to xfptos().

	* math.c: Add FP() wrappers on floating-point constants.

	* random.c: Add FP() wrappers on floating-point constants.

	* store.c: Include hoc.h instead of fp_t.h.

	* string.c: Add support for three precisions.  Add FP() wrappers
	  on floating-point constants.  Rename xdbltos() to xfptos().

	* symbol.c: Add FP() wrappers on floating-point constants.

	* time.c: Add FP() wrappers on floating-point constants.

------------------------------------------------------------------------
2002-01-11 12:42:20-0700  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* Freeze code snapshot for version 7.0.1.beta.

	* Following the practice in the Java programming language, input
	  file may use any of three different line terminator
	  conventions: LF (UNIX and GNU), CR LF (PC DOS, MS Windows,
	  OS/2, TOPS-20, CPM-86, ...), or CR (MacOS), and strings of one
	  or more Ctl-Z characters at end-of-file are discarded.

	* All input files are now searched for on HOCPATH, a
	  colon-separated (on UNIX-like systems) list of directories.
	  In each directory, a default extension of .hoc is tried if the
	  file is not found, and the filename does not already end with
	  .hoc.  A default value of HOCPATH is provided in it is not
	  defined in the environment.  A default system search path is
	  implicitly inserted into HOCPATH whereever an empty path
	  element appears (an idea borrowed from recent UNIX TeX
	  releases) to eliminate the need for users to know the names of
	  system directories.  These changes allow users to issue
	  load("file") commands without using the .hoc extension, or
	  knowing exactly where in the HOCPATH the file will be found.
	  The system path includes version-specific and version-free
	  site-specific directories (an idea borrowed from GNU emacs),
	  and those directories occur before the standard ones, so that
	  locally-added files can override standard files.

	* The load() function has a temporary new implementation to
	  resolve problems on some systems, but further work is needed,
	  because endinput() is partly broken by the change.

	* The save() function will not save builtin constants (the
	  previous version did the same thing, but also excluded
	  user-defined immutable constants).

	* New immutable numeric constants: __GID__ (O/S group id),
	  __PID__ (O/S process id), and __UID__ (O/S user id).

	* System installation directories and search paths are now
	  recorded as immutable string constants __SYSxxx__.

	* All internal arrays are now dynamically resized, with their
	  current sizes recorded as immutable constants __MAX_xxx__.

	* Several new functions have been implemented, some in loadable
	  library code (marked with **):

		cd()
		defined()
		delete()
		dirs()		**
		msg_translate()
		number()
		popd()		**
		protect()
		pushd()		**
		pwd()
		set_locale()
		string()
		symnum()
		symstr()
		xd()		**

	* New libraries added:

		fortune.hoc
		primes.hoc
		pushd.hoc

	* New emacs functions in hoc.el: hoc-printify and
	  hoc-unprintify.

	* The hoc grammar has been improved to better handle string
	  expressions, although it is not yet possible for user-defined
	  functions to return a string instead of a number.  To
	  eliminate grammatrical ambiquities, string arguments in
	  functions and procedures should use a double dollar sign
	  followed by an integer: $$1 is a string, $1 is a number.  The
	  new number() and string() functions can coerce one data type
	  to the other.

	* New validation tests have been added, and there is a new test
	  group g (miscellaneous tests).

	* hr/help.hoc, hr/hoc.rc, hr/translations.hoc:
	  Croation help and translation files.

------------------------------------------------------------------------

2001-12-11 08:25:21-0700  Nelson H. F. Beebe  <beebe@@math.utah.edu>

	* ChangeLog [new with hoc version 7]: This file.

	* Makefile.in [new with hoc version 7, but adapted from the
	  original makefile]: Makefile template for GNU autoconf.
	  When the configure script is run, it uses this file to
	  create a Makefile customized for the current environment.

	* PROBLEMS [new with hoc version 7]: This file records
	  software porting problems met during development.

	* PROJECTS [new with hoc version 7]: This file records
	  possibly interesting ideas for future directions in hoc
	  development.

	* README: The original README file from the (then) AT&T Bell
	  Laboratories hoc distribution, notably containing a license,
	  and a record of changes made in hoc after the book was
	  published in 1984.

	* README.NaN [new with hoc version 7]: Documentation on how
	  NaNs are represented in current computer architectures.
	  These details are necessary for hoc to distinguish between
	  quiet and signaling NaNs.

	* README.UTAH: Installation instructions, and comments on the
	  early change history, for hoc version 6.

	* WHERE-FROM: Record of where the original hoc version 6
	  distribution came from.

	* ansi2knr.c: Conversion program for converting Standard C to
	  old-style K&R C; this is done by "make convert-to-knr".

	* check-help.sh [new with hoc version 7]: Script to display
	  the hoc help text in each supported language, and verify
	  that no lines exceed the 72-character-maximum convention,
	  and to facilitate proofreading.

	* chkctype.c [new with hoc version 7]: Simple program to
	  display character attributes in different locales.

	* chkgamma.c [new with hoc version 7]: Simple program to
	  display values from gamma(x) and lgamma(x).  It was used
	  during development to diagnose a problem on Sun Solaris with
	  shared libraries.

	* chkieee.c [new with hoc version 7]: Simple program, used at
	  configure time, to determine whether the host floating-point
	  arithmetic follows IEEE 754 or not.

	* chklocale.c [new with hoc version 7]: Simple program to test
	  the setting of locale variables.

	* chkscalb.c [new with hoc version 7]: Simple program to test
	  return values for scalb().  It was written to diagnose a
	  discrepancy between documentation and header files on Apple
	  Darwin.

	* chkstore.c [new with hoc version 7]: Simple functions used
	  from chkieee.c to defeat optimizers.

	* chkstrtod.c [new with hoc version 7]: Simple program to test
	  the behavior of strtod() under different locales.

	* code.c: This is hoc's virtual machine code generator.

	  There are many changes in this file.

	  All code now conforms to strict 1989 and 1999 ISO Standard
	  C, and 1998 ISO Standard C++.  This means explicit typing of
	  all functions, renaming of the private functions and(),
	  not(), and or(), to And(), Not(), and Or() to avoid
	  conflicts with C++ reserved words, extensive use of the
	  const type modifier, and use of explicit casts on data and
	  pointer conversions.  While the original terse writing of "p
	  = 0" is shorter than "p = (const char*)NULL", the latter
	  makes explicit that there is a pointer data conversion.
	  Such casts are recommended practice in modern programming,
	  and required practice in C++ (at least for integer constants
	  other than 0 being converted to pointers).

	  New functions:
		abort_user()
		bltin0()
		bltin1() [the original bltin(), with a new name
		reflecting the function argument count]
		bltin2()
		const_assign()
		const_str_assign()
		const_str_push()
		Evalcommands()
		fmtnum()
		hex()
		hexfp()
		hexint()
		noop()
		numtostr()
		printtopstring()
		prnl()
		prnum()
		prstr()
		prtext2()
		prtext()
		str_assign()
		str_concat_nn()
		str_concat_ns()
		str_concat_sn()
		str_concat_ss()
		str_eq()
		str_ge()
		str_gt()
		str_index()
		str_le()
		str_length()
		str_lt()
		str_ne()
		str_strftime()
		str_substr()
		str_to_num()
		strbltin0()
		strbltin1()
		strbltin2()
		streval()
		Who().

	  Add GNU readline support.

	  Protect header file inclusion with feature-test
	  conditionals.

	  Make array dimensions changeable at compile time, and
	  increase them, since we now handle considerably larger hoc
	  programs since the old PDP-11 days.

	  Change nargs from int to long to remove some unnecessary
	  type coercions.

	  When HAVE_IEEE_754 is defined (as it will be on almost all
	  modern systems), floating-point exceptions no longer terminate
	  execution.

	  In assign() and str_assign(), prevent assignment to
	  immutable named constants.

	  Use get_precision() to get the current value of PREC,
	  instead of explicit symbol table lookup, both for
	  information hiding, and to simplify the code.

	* config.h [new with hoc version 7]: This header file contains
	  definitions of all feature-test constants.  It is created
	  automatically by the configure script at installation time.
	  It defines (or undefines) about 60 HAVE_xxx feature-test
	  symbols, plus the PACKAGE_xxx symbols used in hoc() output,
	  plus a handful of others.

	* config.hin [new with hoc version 7]: This is the GNU
	  autoconf template file which the configure script uses to
	  produce config.h at installation time.  config.hin is
	  produced automatically by autoheader from configure.in.

	* configure [new with hoc version 7]: This is the master
	  installation script, full of devious, but highly portable,
	  UNIX shell code to carry out the installation-time feature
	  testing, and from those results, create config.h and
	  Makefile.  At more than 8200 lines, it is several times
	  larger than the entire original hoc version 6 distribution,
	  and more than six times longer than the largest file, hoc.y,
	  written by human programmers.  Fortunately, it is not
	  prepared by hand, but rather, it is produced automatically
	  by autoconf from the much smaller manually-written file,
	  configure.in (ca. 510 lines).  [Neither autoconf nor
	  autoheader are needed at end-user sites: only the developer
	  needs them.]

	* configure.in [new with hoc version 7]: This is the template
	  file from which autoconf produces the configure script.  It
	  is essentially a set of calls to autoconf m4 macros,
	  interspersed with comments (dnl ... newline) and fragments
	  of simple shell script commands.

	* configure.sed [new with hoc version 7]: Stream editor script
	  to fix up some problems in configure scripts produced by
	  older versions of autoconf.  It may eventually be
	  unnecessary.

	* expm1.hoc [new with hoc version 7]: Sample implementation in
	  the hoc language of the accurate computation of expm1(x) =
	  exp(x) - 1.  [The right-hand side expression suffers serious
	  accuracy loss in floating-point arithmetic when x approaches
	  zero.]

	* fp_t.h [new with hoc version 7]: Header file to define the
	  floating-point type, currently double, but soon on some
	  systems, long double.

	* help.hoc [new with hoc version 7]: Master help file for hoc.
	  It is installed when hoc is installed, and loaded dynamically
	  when hoc starts up, unless that loading has been suppressed by
	  a command-line option.  It is intentionally kept separate from
	  the associated code (some in hoc, some in C, and some in local
	  run-time libraries) to facilitate translation into other
	  languages.

	* hoc.1: UNIX manual page for hoc, in troff markup.  From this
	  file, hoc.html, hoc.ps, hoc.pdf, and hoc.txt are derived
	  automatically.

	  Document new named constants: CATALAN, INF, Inf, Infinity,
	  MAXNORMAL, MINNORMAL, MINSUBNORMAL, NAN, NaN, QNAN, QNaN,
	  SNAN, and SNaN.

	  Document new := immutable assignment operator.

	  Document new functions: asin(), ceil(), floor(), ln(), log2(),
	  nint().  [There are now many more to be added to this list.]

	  Add several new sections (with more than 30 subsections):
		ACKNOWLEDGEMENTS
		AVAILABILITY
		BUGS
		COPYRIGHT
		DESCRIPTIONS OF BUILT-IN FUNCTIONS AND PROCEDURES
		FLOATING-POINT ARITHMETIC
		HELP SYSTEM
		HOC SUPPORT IN GNU EMACS
		IMPLEMENTATION LIMITS
		INITIALIZATION FILES
		INTERNATIONALIZATION

	* hoc.el [new with hoc version 7]: Emacs Lisp file to provide
	  convenient editing support for files in the hoc language.

	* hoc.h: Master header file, used by all of the hoc C source
	  files.  New features:

		** Typedefs F0_t, F1_t, F2_t, SF0_t, SF1_t, and SF2_t
		   for functions of 0, 1, and 2 arguments, to avoid
		   messy and ugly casts.

		** Function prototypes for several dozen new functions.

		** Changes in some existing function prototypes,
		   usually to add const modifiers.

		** Addition of new members in the Symbol structure and
		   Datum union.

	  	** When the C long long data type is available (true in
		   many C and C++ compilers in 2001, even if they
		   implement it in software), it is used in preference
		   to long for floating-point <-> integer conversions,
		   to increase the available number range.

	* hoc.rc [new with hoc version 7]: Master startup file for
	  hoc.  It is installed when hoc is installed, and loaded
	  dynamically when hoc starts up, unless that loading has been
	  suppressed by a command-line option.

	* hoc.y: Master grammar file for hoc.  This also contains the
	  main program, and several utility functions.

	  New features:

		** The grammar has been extended to support string
		   constants, variables, and expressions, unary plus,
		   the new abort(), printf(), __hex() [temporary],
		   hexfp(), hexint(), number(), string(), and who()
		   built-in functions, and a new assignment operator,
		   :=, used to create immutable named constants.
	  	   abort() allows hoc programs to cause immediate return
	  	   to the top level hoc evaluator, just like built-in
	  	   functions can.  This is necessary if kernel code
	  	   candidates are to be prototyped first in the hoc
		   language.

		** Hide lineno access in new functions bump_lineno() and
		   init_lineno(), since the current value is now
		   available in the __LINE__ variable to hoc programs.

		** Add GNU readline support.

		** Add support for system-wide and user-specific
		   initialization files, including internationalized
		   ones.

		** Add support for several command-line options.
		   Argument processing is now in separate functions,
		   do_pre_args() and do_post_args(), instead of
		   in-line in main().

		** Add support for several new predefined named
		   constants and variables: __DATE__,
		   __FILE__, __IEEE_754__, __LINE__,
	  	   __PACKAGE_BUGREPORT__, __PACKAGE_DATE__,
	  	   __PACKAGE_NAME__, __PACKAGE_STRING__,
	  	   __PACKAGE_VERSION__, __PROMPT__, __TIME__, and
		   __VERBOSE__.

		** Change warning messages into the GNU and UNIX
		   standard form file:lineno:message, for user
		   familiarity, and convenience with text editors that
		   know how to parse such messages and jump to that
		   location in the file.

		** Create a Symbol for quoted character strings, instead
		   of the old ugly hack of masquerading a string pointer
		   on top of a Symbol pointer.

		** Add support for Standard C/C++ escape sequences in
		   character strings, plus \E (for escape: handy in
		   creating new __PROMPT__ strings).

		** Use new dupstr() function for string allocation,
		   instead of explicit calls to emalloc() and strcpy().

		** Protect header file inclusion with feature-test
		   conditionals.

		** Provide extended IsAlNum(), IsAlpha(), IsIdStart(),
		   and IsIdMiddle() to support internationalization of
		   hoc source code.

		** Make array dimensions changeable at compile time, and
		   increase them, since we now handle considerably
		   larger hoc programs since the old PDP-11 days.

		** Add definitions of the names and locations of startup
		   files (HOCRC, SYSHOCDIR, SYSHOCHLP, SYSHOCHLPBASE,
		   SYSHOCRC SYSHOCRCBASE, SYSHOCXLT SYSHOCXLTBASE).

		** Add code4() macro.

	* i18n-sample.ps [new with hoc version 7]: PostScript version
	  of i18n-sample.txt.

	* i18n-sample.txt [new with hoc version 7]: Sample showing the
	  preliminary efforts at internationalizing hoc.

	* ieee754.c [new with hoc version 7]: Code for IEEE 754
	  support, with these functions:

		Ceil()
		Copysign()
		Exponent()
		Floor()
		Fmod()
		Ilogb()
		Infinity()
		Integer()
		IsBigEndian()
		IsFinite()
		IsInf()
		IsNaN()
		IsNormal()
		IsQNaN()
		IsSNaN()
		IsSubnormal()
		Ldexp()
		Macheps()
		MaxNormal()
		MinNormal()
		MinSubnormal()
		NaN()
		Nearest()
		Nextafter()
		Nint()
		QNaN()
		Remainder()
		Rint()
		SNaN()
		Scalb()
		Significand()
		Trunc()

	* init.c: Source file with initialization code for hoc.

	  There are many changes in this file.

	  Make the code conform to C and C++ Standards.

	  Protect header file inclusion with feature-test conditionals.

	  Add default_precision(), set_precision(), and get_precision()
	  functions to control access to the output precision variable,
	  PREC.  default_precision() uses a mathematically-correct
	  formula for the number of decimal figures needed to represent
	  floating-point numbers to allow error-free round-trip
	  conversion between binary and decimal, instead of the old
	  hard-coded magic number 15 (which is too small anyway).

	  Add initializer table entries for new statements, many new
	  functions, and new named constants (CATALAN, INF, Inf,
	  Infinity, NAN, NaN, QNAN, QNaN, SNAN, and SNaN), and new
	  functions init_builtins() and init_consts().

	  Do run-time initialization of named constants that cannot be
	  done with compile-time initialization.

	* log1pa.hoc [new with hoc version 7]: Sample implementation
	  in the hoc language of the computation of log1p(x) =
	  log(1+x), method A.

	* log1pb.hoc [new with hoc version 7]: Sample implementation
	  in the hoc language of the computation of log1p(x) =
	  log(1+x), method B.

	* log1pc.hoc [new with hoc version 7]: Sample implementation
	  in the hoc language of the computation of log1p(x) =
	  log(1+x), method C (still incomplete).

	* math.c: Source file with all of the mathematical functions
	  used by hoc.

	  There are a great many changes in this file.

	  The most significant is that ALL hoc functions now go through
	  interface functions.  In hoc version 6, some did, and some did
	  not.  This change makes it easy to provide additional features
	  to make library functions more uniform across platforms, and
	  to provide private implementations.  It will also facilitate
	  adding support later for run-time profiling.

	  Instead of the original small set of 18 functions (three of
	  which are not universally supplied in C libraries), there
	  are now 82 built-in functions (from this file, and others)
	  providing access to the union of mathematical library
	  support available in UNIX C implementations.  Some will fall
	  back to less accurate implementations if the native library
	  support is not available; others will declare a run-time
	  failure, and abort the expression in which they were used
	  (but NOT the hoc job!).

	  Built-in functions fall into three classes, according to the
	  fixed number of arguments that they take: 0, 1, or 2.  These
	  in turn are grouped into numeric and string functions.  A
	  few functions do not fit these prototypes, so they are
	  handled by rules in the yacc grammar.  I felt that it was
	  better to enforce the argument count in the grammar, rather
	  than have a generic n-argument function call that trusted
	  users to get the argument counts right.

	  Interface functions are stored alphabetically in the source
	  file, instead of in the old haphazard order of hoc version 6.

	* random.c [new with hoc version 7]: Pseudo-random number support.

	* readline.c [new with hoc version 7]: Interface to GNU
	  readline library.

	* readline.h [new with hoc version 7]: Header file defining the
	  minimal interface to functions in readline.c needed by hoc.y.

	* stdc.h [new with hoc version 7]: Header file defining some
	  macros that allow the code to adapt to both Kernighan &
	  Ritchie old-style C, and to new Standard C/C++.
	  [Originally, I planned to support only the latter, but I
	  have one test platform for an architecture that I otherwise
	  no longer have access to that has only K&R C.  The code
	  changes for this retrofit were relatively modest, mostly in
	  the function prototypes; the ansi2knr program does the rest
	  of the conversion, all under the direction of the make
	  utility.]

	* store.c [new with hoc version 7]: Source file with the
	  store() function, used to force data out of long registers
	  into memory.

	* string.c [new with hoc version 7]: Source file with the
	  string datatype support.

	* symbol.c: Source file with symbol table support for hoc.

	  There are many changes in this file.

	  Make the code conform to C and C++ Standards.

	  Protect header file inclusion with feature-test conditionals.

	  New functions:
		cmpsym(),
		dump_syms(),
		dupstr(),
		efree(),
		erealloc(),
		first_matching_symbol_name(),
		first_symbol(),
		first_symbol_name(),
		first_symbol_pname(),
		install_const_number(),
		install_const_string(),
		install_number(),
		install_string(),
		is_hidden(),
		is_match(),
		make_immutable(),
		msg_translate(),
		next_matching_symbol_name(),
		next_symbol(),
		next_symbol_name(),
		next_symbol_pname(),
		set_number(),
		set_string(),
		update_number(),
		update_string(),

	  The dump_xxx() functions support the new who() function, which
	  was inspired by a similar feature in the Matlab linear algebra
	  system.

	* test/*:

	  This directory is a major update, with many new test programs,
	  renaming of old test files to include a .hoc extension, and
	  restructuring of the directory to contain a subdirectory,
	  okay, with correct output to stderr and stdout for each test.

	  Some of the new tests are for functions that do not have
	  simple relationships that would permit detailed testing (the J
	  and K Bessel functions are examples), so the test files are
	  generated entirely automatically by Maple programs.  Maple is
	  a proprietary, though widely used, symbolic algebra system
	  (visit http://www.maplesoft.com/ for details).  Maple is
	  needed only at the hoc development site, NOT during
	  installation at end-user sites.

	  All of the new test programs (run via the subtargets check-b
	  and check-c in the Makefile) use a common scaffolding with
	  pre- and post- hoc code that make the testing uniform, and
	  significantly simplify the writing of the tests.  Mostly, the
	  tests consist of setting the test name (for possible
	  diagnostic messages), and then invoking an assertion that some
	  condition is true, or some expression matches another to some
	  default relative error (which can be customized for each
	  test).

	  The tests produce no output visible to the user, except in
	  the event of failure, in which case there is a one-line
	  report.  At the end of testing, a report is printed of the
	  number of failures encountered, if there were any.
	  Otherwise, the only output from a "make check" run is the
	  names of the tests, which are displayed as each new one is
	  started.

	* time.c [new with hoc version 7]: Timing support.

	* da/help.hoc, da/hoc.rc, da/translations.hoc:
	  Prototypes of Danish help files and replacement/augmentation
	  functions from the parent help.hoc and hoc.rc files, and
	  translations of strings that are hard-coded into C code in
	  the hoc kernel.  These help files are still rudimentary,
	  both for lack of time to write complete translations, and
	  because such extensive translations are inappropriate during
	  development, when the help system may be changing.  The
	  translation file is complete.

	* de/help.hoc, de/hoc.rc, de/translations.hoc:
	  German help and translation files.

	* en/help.hoc, en/hoc.rc, en/translations.hoc:
	  English help and translation files.  The translation file is
	  complete.  [Since the original documentation is in English,
	  the help files are merely copies, but the translations
	  include the complete strings, allowing language changes in
	  mid-session.]

	* fr/help.hoc, fr/hoc.rc, fr/translations.hoc:
	  French help and translation files.  The translation file is
	  complete.

	* pt/help.hoc, pt/hoc.rc, pt/translations.hoc:
	  Portuguese help and translation files.

	* tr/help.hoc, tr/hoc.rc, tr/translations.hoc:
	  Turkish help and translation files.
@


1.31
log
@Development snapshot.
@
text
@d258 6
d285 2
@


1.30
log
@Development snapshot.
@
text
@d258 30
a337 3
	* readline.c: Make irl_word_generator() and irl_completion()
	  static.

@


1.29
log
@Development snapshot.
@
text
@d258 106
@


1.28
log
@Development snapshot.
@
text
@d256 26
@


1.27
log
@Development snapshot.
@
text
@d1 2
d256 17
d290 1
a290 1
	
d309 1
a309 1
	  news_hoc_7_0_6_beta(). 
d1400 1
a1400 1
		   available in the __LINENO__ variable to hoc programs.
d1415 1
a1415 1
		   __FILE__, __IEEE_754__, __LINENO__,
@


1.26
log
@Development snapshot.
@
text
@d267 5
a271 1

d276 2
a277 1
	  help_encrypt().
d288 3
a290 2
	* hoc.rc: Update date and version number in banner, and update
	  feature list in news_hoc_7_0_5_beta().
d300 3
a302 1
	  corresponding initialization code in init_builtins().
@


1.25
log
@Development snapshot.
@
text
@d254 53
d308 1
a308 1
------------------------------------------------------------------------	
d312 1
a312 1
	
@


1.24
log
@Development snapshot.
@
text
@d255 5
d486 2
@


1.23
log
@Development snapshot.
@
text
@d316 2
@


1.22
log
@Development snapshot.
@
text
@d311 5
@


1.21
log
@Development snapshot.
@
text
@d256 56
@


1.20
log
@Development snapshot.
@
text
@d254 2
d260 8
a267 1
	  and hexadecimal representations thereof.
d271 9
a279 2
	
	* hoc.h: Add declarations of FtoH() and HtoF().
d282 2
a283 2
	  strbuiltins_1n[]. 
	
d285 4
a288 1
	
d298 1
a298 1
	
d301 1
a301 1
	
d303 1
a303 1
	
d308 1
a308 1
	
d315 1
a315 1
	
d328 2
a329 2
	
	
d332 1
a332 1
	  case.  
d339 1
a339 1
	
d412 2
a413 1
	* test*/{break,continue}.hoc: New test files.
@


1.19
log
@Development snapshot.
@
text
@d254 1
d256 14
@


1.18
log
@Development snapshot.
@
text
@d260 5
d268 2
d295 11
@


1.17
log
@Development snapshot.
@
text
@d254 33
d309 1
a309 1
	
d314 1
a314 1
	
d361 1
a361 1
	
@


1.16
log
@Development snapshot.
@
text
@d325 4
@


1.15
log
@Development snapshot.
@
text
@d254 2
d279 3
d322 3
@


1.14
log
@Development snapshot.
@
text
@d272 3
@


1.13
log
@Development snapshot.
@
text
@d254 60
@


1.12
log
@Development snapshot.
@
text
@d255 16
d298 1
a298 1
	
d308 1
a308 1
		
d320 1
a320 1
	
d330 1
a330 1
------------------------------------------------------------------------	
d332 1
a332 1
	
d338 1
a338 1
	
d342 1
a342 1
	  
d345 1
a345 1
	
d348 1
a348 1
	  
d354 1
a354 1
	  
d358 1
a358 1
	  
d366 1
a366 1
	
d368 1
a368 1
	  that lack it. 
d371 1
a371 1
	  because fp_t.h requires it. 
@


1.11
log
@Development snapshot.
@
text
@d281 2
@


1.10
log
@Routine update
@
text
@d254 57
d315 2
a316 2
	* Continue work for version 7.0.4.beta.
	
@


1.9
log
@Routine update
@
text
@d256 50
a305 1
2002-07-18 11:06:01-0600  Nelson H. F. Beebe  <beebe@@client.attbi.com>
d312 1
a312 1
	
d314 1
a314 1
	
d318 1
a318 1
	
d320 1
a320 1
	
d325 1
a325 1
	
d329 1
a329 1
	
d334 1
a334 1
	
d338 1
a338 1
	
d340 1
a340 1
	
d351 1
a351 1
	
d364 2
a365 2
	  prtext() and prnl() (see __INDENT__ comments above).  
	
d367 1
a367 1
	  and renamed prefix to pattern, so that printenv(), save(), and
d373 1
a373 1
	
d376 1
a376 1
	
d378 2
a379 2
	
	* Makefile.in: Add match.c to SRCS and PRSRCS.  Add ETAGS 
d383 1
a383 1
	
@


1.8
log
@Routine update
@
text
@d256 89
d350 1
a350 1
	  redefined. 
d354 1
a354 1
	  
d358 1
a358 1
	
d369 1
a369 1
	  
d378 2
a379 2
	  functions xxx(). 
 
d393 1
a393 1
	
d434 1
a434 1
	
d436 1
a436 1
	
d442 2
a443 2
	
	
@


1.7
log
@Add log entries for today's work: two bug fixes, two new functions,
and support for subnormals on SGI IRIX 6.x systems.

Correct one misspelling: __MAX_xxx___ -> __MAX_xxx__.
@
text
@d255 50
d309 1
a309 1
	  18-Feb-2002).
d344 12
@


1.6
log
@Update for version hoc-7.0.3.beta.
@
text
@d256 38
d304 1
a304 1
	  
d306 1
a306 1
	  dependency lists. 
d314 1
a314 1
	
d322 1
a322 1
	
d325 1
a325 1
	  lcc-specific code block, so that we properly handle 
d328 1
a328 1
	
d333 2
a334 2
	  fp_arch.h, instead of compiler-dependent ones.  
	
d337 1
a337 1
	
d340 1
a340 1
	  
d343 2
a344 2
	  incorrectly. 
	
d346 1
a346 1
	  masquerading as double. 
d488 1
a488 1
	  current sizes recorded as immutable constants __MAX_xxx___.
@


1.5
log
@Routine update
@
text
@d1 2
d254 55
@


1.4
log
@Update for version 7.0.2.beta.
@
text
@d262 1
a262 1
	
d269 1
a269 1
	
d275 4
d283 1
a283 1
	
d288 4
a291 4
	  precision, and update the dependency lists for store.[ios]. 
	
	* PROBLEMS: Log more system problems discovered during testing.	  
	  
d297 1
a297 1
	  
d300 1
a300 1
	  Add workaround for broken significand() on GNU/Linux systems. 
d307 1
a307 1
	  
d323 1
a323 1
	  
d328 1
a328 1
	
d334 1
a334 1
	  
d338 1
a338 1
	  
d340 1
a340 1
	
d342 1
a342 1
	  	
d344 2
a345 2
	  on floating-point constants.  Rename xdbltos() to xfptos().  
	  
d347 1
a347 1
	  
d349 1
a349 1
	  
d437 1
a437 1
	  
@


1.3
log
@Update with log of changes for version 7.0.1.beta.
@
text
@d1 2
d253 4
d258 88
@


1.2
log
@Major update to summarize recent work.
@
text
@d251 89
@


1.1
log
@Initial revision
@
text
@d1 2
d34 3
a36 4
functionality, documentation (including an extensive online help
facility), and testing, and runs on a great many different GNU, UNIX,
and POSIX platforms.  Even so, its compressed distribution is only about
200KB.
d226 7
a232 7
	  At present, these appear ONLY in two functions, in math.c:
	  IsQNaN() and IsSNaN().  They are essential, and unavoidable,
	  because these two functions need to know about the
	  underlying hardware representation of quiet and signalling
	  NaNs.  Those properties are defined in architecture
	  specification books, and CANNOT be determined by run-time
	  tests.
d237 3
a239 3
The machine epsilon, macheps(x), is currently implemented as a hoc
function that is loaded dynamically, instead of in C code.  It may
migrate to C code if it becomes necessary in the hoc kernel.
d243 7
a249 1
this information can be written completely portably.
d277 1
a277 1
	  quiet and signalling NaNs.
d285 2
a286 1
	* begin.hoc [new with hoc version 7]: Trivial test file.
d289 3
a291 3
	  the hoc help text, and verify that no lines exceed the
	  72-character-maximum convention, and to facilitate
	  proofreading.
d316 3
d337 2
a338 2
		abort_user(),
		bltin0(),
d340 39
a378 13
		reflecting the function argument count],
		bltin2(),
		const_assign(),
		const_str_assign(),
		const_str_push(),
		hex(),
		noop(),
		printtopstring(),
		prstr(),
		str_assign(),
		str_concat(),
		streval(), and
		who().
d419 1
a419 1
	  Makefile.  At more than 7600 lines, it is several times
d421 1
a421 1
	  and almost seven times longer than the largest file, hoc.y,
d425 1
a425 1
	  configure.in (ca. 430 lines).  [Neither autoconf nor
a439 2
	* end.hoc [new with hoc version 7]: Trivial test file.

d446 4
d458 3
a460 1
	* hoc.1: UNIX manual page for hoc, in troff markup.
d463 2
a464 1
	  NAN, and NaN.
d471 12
a482 1
	  Add new section, INITIALIZATION FILES.
d490 3
a492 2
		** Typedefs F0_t, F1_t, and F2_t for functions of 0, 1,
		   and 2 arguments, to avoid messy and ugly casts.
d519 3
a521 2
		   constants, variables, and expressions, the new
		   abort(), printf(), __hex() [temporary], and who()
d527 2
a528 1
	  	   candidates are to be prototyped in hoc first.
d541 3
a543 2
		   Argument processing is now in a separate function,
		   do_args(), instead of in-line in main().
d573 3
a575 2
		** Provide extended isalpha() and isalnum() to support
		   internationalization of hoc source code.
d582 4
a585 1
		   files (HOCRC, SYSHOCDIR, SYSHOCRCBASE, SYSHOCHLPBASE).
d593 36
d647 2
a648 1
	  Infinity, NAN, NaN), and new function init_consts().
d678 8
a685 7
	  which are not universally supplied in C libraries), there are
	  now 59 built-in functions, providing access to the union of
	  mathematical library support available in UNIX C
	  implementations.  Some will fall back to less accurate
	  implementations if the native library support is not
	  available; others will declare a run-time failure, and abort
	  the expression in which they were used (but NOT the hoc job!).
d688 7
a694 4
	  fixed number of arguments that they take: 0, 1, or 2.  I felt
	  that it was better to enforce the argument count in the
	  grammar, rather than have a generic n-argument function call
	  that trusted users to get the argument counts right.
d699 19
d722 3
d734 25
a758 9
		cmpsym()
		dump_one_type()
		dump_syms()
		dupstr()
		install_const_number()
		install_const_string()
		install_number()
		install_string()
		set_string()
d790 9
a798 6
	  The tests produce no output, except in the event of failure,
	  in which case there is a one-line report.  At the end of
	  testing, a report is printed of the number of failures
	  encountered, if there were any.  Otherwise, the only output
	  from a "make check" run is the names of the tests, which are
	  displayed as each new one is started.
d800 1
a800 1
	* da/help.hoc, da/hoc.rc:
d802 27
a828 15
	  functions from the parent help.hoc or hoc.rc files.  These are
	  still rudimentary, both for lack of time to write complete
	  translations, and because such extensive translations are
	  inappropriate during development, when the help system may be
	  changing.

	* de/help.hoc, de/hoc.rc:
	  Rudimentary prototypes of German help files and
	  replacement/augmentation functions from the parent help.hoc or
	  hoc.rc files.

	* fr/help.hoc, fr/hoc.rc
	  Rudimentary prototypes of French help files and
	  replacement/augmentation functions from the parent help.hoc or
	  hoc.rc files.
@
