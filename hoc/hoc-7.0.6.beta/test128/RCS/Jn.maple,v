head	1.2;
access;
symbols;
locks
	beebe:1.2; strict;
comment	@# @;


1.2
date	2001.12.19.14.27.49;	author beebe;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.11.15.21.56;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.2
log
@Add two final loop nests to check recursion relations.
@
text
@Digits := 50:

xbig := 1.0e+10:

printf("__MAXULPS = 512\n\n");

for n in [  0, 1 ] do
	if (abs(evalf(BesselJ(n,xbig))) > 1) then
		printf("__TEST__ = \"isinf(J%d(Inf))\"\n", n);
		printf("__assert   (isinf(J%d(Inf)))\n\n", n);
	else
		printf("__TEST__ = \"J%d(Inf) == 0\"\n", n);
		printf("__assert   (J%d(Inf) == 0)\n\n", n);
	end if
end do;

for n in [ 0, 1, 2, 3, 4, 5, 10, 20, 50, 100 ] do
	if (abs(evalf(BesselJ(n,xbig))) > 1) then
		printf("__TEST__ = \"isinf(Jn(%3d,Inf))\"\n", n);
		printf("__assert   (isinf(Jn(%3d,Inf)))\n\n", n);
	else
		printf("__TEST__ = \"Jn(%3d,Inf) == 0\"\n", n);
		printf("__assert   (Jn(%3d,Inf) == 0)\n\n", n);
	end if
end do;

for n in [  0, 1 ] do
	printf("__TEST__ = \"isnan(J%d(NaN))\"\n", n);
	printf("__assert   (isnan(J%d(NaN)))\n\n", n);
end do;

for n in [ 0, 1, 2, 3, 4, 5, 10, 20, 50, 100 ] do
	printf("__TEST__ = \"isnan(Jn(%3d,NaN))\"\n", n);
	printf("__assert   (isnan(Jn(%3d,NaN)))\n\n", n);
end do;

for n in [ 0, 1 ] do
	for x from 0 to 10 by 0.5 do 
		printf("__TEST__ = \"J%d(%4.1f) == %51.50g\"\n", 
			n, x, evalf(BesselJ(n,x))); 
		printf("__match    (J%d(%4.1f), %53.50g)\n\n", 
			n, x, evalf(BesselJ(n,x)));
	end do;
	for x from 15 to 100 by 5 do 
		printf("__TEST__ = \"J%d(%4.1f) == %51.50g\"\n", 
			n, x, evalf(BesselJ(n,x))); 
		printf("__match    (J%d(%4.1f), %53.50g)\n\n", 
			n, x, evalf(BesselJ(n,x)));
	end do;
end do;

for n in [ 0, 1 ] do
	for x from 0 to 10 by 0.5 do 
		printf("__TEST__ = \"Jn(%1d,%4.1f) == J%1d(%4.1f)\"\n", 
			n, x, n, x);
		printf("__match    (Jn(%1d,%4.1f),   J%1d(%4.1f))\n\n", 
			n, x, n, x);
	end do;
	for x from 15 to 100 by 5 do 
		printf("__TEST__ = \"Jn(%1d,%4.1f) == J%1d(%4.1f)\"\n", 
			n, x, n, x);
		printf("__match    (Jn(%1d,%4.1f),   J%1d(%4.1f))\n\n", 
			n, x, n, x);
	end do;
end do;

for n in [ 0, 1, 2, 3, 4, 5, 10, 20, 50, 100 ] do
	for x from 0 to 10 by 0.5 do 
		printf("__TEST__ = \"Jn(%3d,%4.1f) == %51.50g\"\n", 
			n, x, evalf(BesselJ(n,x))); 
		printf("__match    (Jn(%3d,%4.1f), %53.50g)\n\n", 
			n, x, evalf(BesselJ(n,x)));
	end do;
	for x from 15 to 100 by 5 do 
		printf("__TEST__ = \"Jn(%3d,%4.1f) == %51.50g\"\n", 
			n, x, evalf(BesselJ(n,x))); 
		printf("__match    (Jn(%3d,%4.1f), %53.50g)\n\n", 
			n, x, evalf(BesselJ(n,x)));
	end do;
end do;

printf("for (x = -100; x <= 100; x += 0.5) \\\n");
printf("{\n");
printf("\t__TEST__ = x \"*Jn(2,\" x \") == (2*J1(\" x \") - \" x \"*J0(\" x \"))\"\n");
printf("\t__match   (x*Jn(2,x), 2*J1(x) - x*J0(x))\n");
printf("}\n\n");

printf("__MAXULPS = 32768\n\n");

printf("for (k = 0; k <= 50; ++k) \\\n");
printf("{\n");
printf("\tfor (x = -100; x <= 100; x += 0.5) \\\n");
printf("\t{\n");
printf("\t\t__TEST__ = x \"*Jn(\" (k+2) \",\" x \") == (2*\" (k+1) \"*Jn(\" (k+1) \",\" x \") - \" x \"*Jn(\" k \",\" x \"))\"\n");
printf("\t\t__match   (x*Jn(k+2,x), 2*(k+1)*Jn(k+1,x) - x*Jn(k,x))\n");
printf("\t}\n");
printf("}\n");
@


1.1
log
@Initial revision
@
text
@d81 17
@
