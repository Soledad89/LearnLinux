head	1.1;
access;
symbols;
locks
	beebe:1.1; strict;
comment	@# @;


1.1
date	2002.08.06.13.42.34;	author beebe;	state Exp;
branches;
next	;


desc
@Original version.
@


1.1
log
@Initial revision
@
text
@### -*-hoc-*-
### ====================================================================
### Test the length() function.
### [20-Dec-2001]
### ====================================================================

__TEST__ = "length(\"\") == 0"
__assert   (length("") == 0)

__TEST__ = "length(\"X\") == 1"
__assert   (length("X") == 1)

abc = "ABCDEFGHIJKLM"

for (k = 1; k <= 12; ++k) \
{
	__TEST__ = "length(substr(\"ABCDEFGHIJKLM\",0," k ")) == " k
	__assert   (length(substr("ABCDEFGHIJKLM",0,k)) == k)
	__TEST__ = "length(substr(abc,0," k ")) == " k
	__assert   (length(substr(abc,0,k)) == k)
	
	__TEST__ = "length(substr(\"ABCDEFGHIJKLM\",1," k ")) == " k
	__assert   (length(substr("ABCDEFGHIJKLM",1,k)) == k)
	__TEST__ = "length(substr(abc,1," k ")) == " k
	__assert   (length(substr(abc,1,k)) == k)

	__TEST__ = "length(substr(\"ABCDEFGHIJKLM\",2," k ")) == " k
	__assert   (length(substr("ABCDEFGHIJKLM",2,k)) == k)
	__TEST__ = "length(substr(abc,2," k ")) == " k
	__assert   (length(substr(abc,2,k)) == k)
}
@
